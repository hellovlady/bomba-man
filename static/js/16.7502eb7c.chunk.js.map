{"version":3,"sources":["routes/pages/Instructions.tsx","containers/RoomCreator/icons.tsx","containers/RoomCreator/utils.tsx","utils/material-ui.ts","components/Container/Container.tsx"],"names":["KeyboardIcon","props","icon","faKeyboard","KeyboardIconWrapper","styled","Container","$length","$size","$isPressed","theme","palette","background","primary","SquareIcon","children","size","length","isPressed","KeyboardSetupContainer","keyboardConfig","DropBomb","MoveDown","MoveLeft","MoveRight","MoveUp","bombKeyLength","label","useState","keyMap","setKeyMap","useKeyboardEvent","onKeyDown","keyEventCode","v","onKeyUp","container","style","width","item","xs","justify","keyCode","map","alignItems","PlayerSetupContainer","playerId","side","isLeft","playerIdIndex","Number","replace","order","name","id","showName","isWalking","gameConfig","Instructions","overflow","spacing","KeyCode","PowerUpIcon","faFistRaised","CubeIcon","faCube","MapIcon","faTh","FireIcon","faFire","faSquare","UserIcon","faUser","RobotIcon","faRobot","GhostIcon","faGhost","CharacterWrapper","div","$showName","$color","CharacterIcon","color","rest","coordinates","top","left","ICON_STYLE","fontSize","powerUpIconPack","generateIconPackFromPowerUps","iconStyle","Object","values","PowerUp","reduce","acc","key","powerUpIcons","Icon","generatePowerUpSection","max","movementStops","powerUp","findEnumKeyFromValue","type","FormComponent","Rating","MovementSpeed","Slider","step","min","Math","marks","generateMarks","minOrStops","maxOrNull","Array","isArray","value","diff","fill","_","ind"],"mappings":"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","file":"static/js/16.7502eb7c.chunk.js","sourcesContent":["import gameConfig from 'config';\nimport PageContainer from 'components/PageContainer';\nimport { faKeyboard } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n\tFontAwesomeIconProps,\n\tKeyboardEventCode,\n\tKeyMap,\n\tPlayerActionKeys,\n\tPlayerId,\n} from 'containers/Game/types';\nimport { H1, H4 } from 'components/typography';\nimport { Grid } from '@material-ui/core';\nimport Container from 'components/Container';\nimport styled from 'styled-components';\nimport { CharacterIcon } from 'containers/RoomCreator/icons';\nimport Spacer from 'components/Spacer';\nimport theme from 'theme';\nimport * as KeyCode from 'keycode-js';\nimport { useKeyboardEvent } from 'store/redux/hooks/usePlayerEvents';\nimport { useState } from 'react';\n\nconst KeyboardIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faKeyboard} {...props} />\n);\n\ntype IsPressed = { isPressed?: boolean };\n\nconst KeyboardIconWrapper = styled(Container)<\n\tStyledProps<Required<SquareIconProps> & IsPressed>\n>`\n\tborder: 2px solid;\n\tborder-radius: 4px;\n\tpadding: 10px;\n\tfont-weight: bold;\n\theight: 45px;\n\ttransition: 0.3s;\n\n\t${({ $length, $size, $isPressed }) => {\n\t\treturn `\n\t\t\theight: ${$size}px;\n\t\t\twidth: ${$size * $length}px;\n\t\t\t${\n\t\t\t\t$isPressed\n\t\t\t\t\t? `\n\t\t\t\t\t\tbackground: white;\n\t\t\t\t\t\tcolor: ${theme.palette.background.primary};\n\t\t\t\t\t\tborder: 2px dashed ${theme.palette.background.primary};\n\t\t\t\t`\n\t\t\t\t\t: ''\n\t\t\t}\n\t\t`;\n\t}}\n`;\n\ninterface SquareIconProps {\n\tsize?: number;\n\tlength?: number;\n}\n\nconst SquareIcon: React.FC<SquareIconProps & IsPressed> = ({\n\tchildren,\n\tsize = 45,\n\tlength = 1,\n\tisPressed,\n}) => (\n\t<KeyboardIconWrapper $length={length} $size={size} $isPressed={isPressed}>\n\t\t{children}\n\t</KeyboardIconWrapper>\n);\n\ninterface KeyboardSetupContainerProps {\n\tkeyboardConfig: Record<\n\t\tPlayerActionKeys,\n\t\t{\n\t\t\tlabel: string;\n\t\t\tkeyCode: KeyboardEventCode;\n\t\t}\n\t>;\n}\n\nconst KeyboardSetupContainer = ({\n\tkeyboardConfig,\n}: KeyboardSetupContainerProps) => {\n\tconst { DropBomb, MoveDown, MoveLeft, MoveRight, MoveUp } = keyboardConfig;\n\tconst bombKeyLength = DropBomb.label.length > 1 ? 3 : 1;\n\n\tconst [keyMap, setKeyMap] = useState<KeyMap>({});\n\tuseKeyboardEvent({\n\t\tonKeyDown: keyEventCode => {\n\t\t\tsetKeyMap(v => ({\n\t\t\t\t...v,\n\t\t\t\t[keyEventCode]: true,\n\t\t\t}));\n\t\t},\n\t\tonKeyUp: keyEventCode => {\n\t\t\tsetKeyMap(v => ({\n\t\t\t\t...v,\n\t\t\t\t[keyEventCode]: false,\n\t\t\t}));\n\t\t},\n\t});\n\n\treturn (\n\t\t<Grid container>\n\t\t\t<Grid container style={{ width: 45 * 3 }}>\n\t\t\t\t<Grid container item xs={12} justify=\"center\">\n\t\t\t\t\t<SquareIcon isPressed={keyMap[MoveUp.keyCode]}>\n\t\t\t\t\t\t{MoveUp.label}\n\t\t\t\t\t</SquareIcon>\n\t\t\t\t</Grid>\n\t\t\t\t<Grid container item xs={12}>\n\t\t\t\t\t{[MoveLeft, MoveDown, MoveRight].map(\n\t\t\t\t\t\t({ label, keyCode }) => (\n\t\t\t\t\t\t\t<SquareIcon\n\t\t\t\t\t\t\t\tisPressed={keyMap[keyCode as KeyboardEventCode]}\n\t\t\t\t\t\t\t\tkey={label}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t\t</SquareIcon>\n\t\t\t\t\t\t)\n\t\t\t\t\t)}\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t\t<Grid style={{ width: 10 }} />\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\tstyle={{ width: 45 * 3 }}\n\t\t\t\tjustify=\"center\"\n\t\t\t\talignItems=\"flex-end\"\n\t\t\t>\n\t\t\t\t<SquareIcon\n\t\t\t\t\tisPressed={keyMap[DropBomb.keyCode]}\n\t\t\t\t\tlength={bombKeyLength}\n\t\t\t\t>\n\t\t\t\t\t{DropBomb.label}\n\t\t\t\t</SquareIcon>\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n\ninterface PlayerSetupContainerProps extends KeyboardSetupContainerProps {\n\tside?: 'left' | 'right';\n\tplayerId: PlayerId;\n}\n\nconst PlayerSetupContainer = ({\n\tkeyboardConfig,\n\tplayerId,\n\tside = 'left',\n}: PlayerSetupContainerProps) => {\n\tconst isLeft = side === 'left';\n\n\tconst playerIdIndex = Number(playerId.replace('P', '')) - 1;\n\n\treturn (\n\t\t<Grid container xs={12} justify=\"center\">\n\t\t\t<Grid item {...(!isLeft && { style: { order: 3 } })}>\n\t\t\t\t<CharacterIcon\n\t\t\t\t\tsize={80}\n\t\t\t\t\tname={playerId}\n\t\t\t\t\tid={playerId}\n\t\t\t\t\tshowName\n\t\t\t\t\tisWalking\n\t\t\t\t\tkeyboardConfig={{\n\t\t\t\t\t\t'0': gameConfig.keyboardConfig[playerIdIndex],\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Grid>\n\t\t\t<Grid item>\n\t\t\t\t<KeyboardSetupContainer keyboardConfig={keyboardConfig} />\n\t\t\t</Grid>\n\t\t</Grid>\n\t);\n};\n\nconst Instructions = () => {\n\treturn (\n\t\t<PageContainer style={{ overflow: 'hidden' }}>\n\t\t\t<Grid container justify=\"center\" alignItems=\"center\">\n\t\t\t\t<KeyboardIcon size=\"3x\" /> &nbsp;&nbsp;\n\t\t\t\t<H1> Instructions </H1>\n\t\t\t\t<H4 style={{ width: '100%' }}>\n\t\t\t\t\tNOTE: In an online game, you can use both setup\n\t\t\t\t</H4>\n\t\t\t\t<H4 style={{ width: '100%' }}>\n\t\t\t\t\tNOTE2: You can test the keys on this screen :)\n\t\t\t\t</H4>\n\t\t\t</Grid>\n\t\t\t<Spacer spacing=\"10\" />\n\t\t\t<PlayerSetupContainer\n\t\t\t\tplayerId=\"P1\"\n\t\t\t\tkeyboardConfig={{\n\t\t\t\t\tMoveUp: {\n\t\t\t\t\t\tlabel: 'W',\n\t\t\t\t\t\tkeyCode: KeyCode.CODE_W,\n\t\t\t\t\t},\n\t\t\t\t\tMoveRight: {\n\t\t\t\t\t\tlabel: 'D',\n\t\t\t\t\t\tkeyCode: KeyCode.CODE_D,\n\t\t\t\t\t},\n\t\t\t\t\tMoveDown: {\n\t\t\t\t\t\tlabel: 'S',\n\t\t\t\t\t\tkeyCode: KeyCode.CODE_S,\n\t\t\t\t\t},\n\t\t\t\t\tMoveLeft: {\n\t\t\t\t\t\tlabel: 'A',\n\t\t\t\t\t\tkeyCode: KeyCode.CODE_A,\n\t\t\t\t\t},\n\t\t\t\t\tDropBomb: {\n\t\t\t\t\t\tlabel: 'Space',\n\t\t\t\t\t\tkeyCode: KeyCode.CODE_SPACE,\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Spacer spacing=\"10\" />\n\t\t\t<PlayerSetupContainer\n\t\t\t\tplayerId=\"P2\"\n\t\t\t\tkeyboardConfig={{\n\t\t\t\t\tMoveUp: {\n\t\t\t\t\t\tlabel: '↑',\n\t\t\t\t\t\tkeyCode: KeyCode.CODE_UP,\n\t\t\t\t\t},\n\t\t\t\t\tMoveRight: {\n\t\t\t\t\t\tlabel: '→',\n\t\t\t\t\t\tkeyCode: KeyCode.CODE_RIGHT,\n\t\t\t\t\t},\n\t\t\t\t\tMoveDown: {\n\t\t\t\t\t\tlabel: ' ↓',\n\t\t\t\t\t\tkeyCode: KeyCode.CODE_DOWN,\n\t\t\t\t\t},\n\t\t\t\t\tMoveLeft: {\n\t\t\t\t\t\tlabel: '←',\n\t\t\t\t\t\tkeyCode: KeyCode.CODE_LEFT,\n\t\t\t\t\t},\n\t\t\t\t\tDropBomb: {\n\t\t\t\t\t\tlabel: ';',\n\t\t\t\t\t\tkeyCode: KeyCode.CODE_SEMICOLON,\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t\tside=\"right\"\n\t\t\t/>\n\t\t</PageContainer>\n\t);\n};\n\nexport default Instructions;\n","import {\n\tfaFistRaised,\n\tfaCube,\n\tfaTh,\n\tfaSquare,\n\tfaFire,\n\tfaUser,\n\tfaRobot,\n\tfaGhost,\n} from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport DeadCharacter from 'containers/Game/components/DeadCharacter';\nimport SpriteCharacter, {\n\tSpriteCharacterProps,\n} from 'containers/Game/components/SpriteCharacter';\nimport { FontAwesomeIconProps } from 'containers/Game/types';\nimport styled from 'styled-components';\nimport { generateIconPackFromPowerUps } from './utils';\n\nconst PowerUpIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faFistRaised} {...props} />\n);\n\nconst CubeIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faCube} {...props} />\n);\n\nconst MapIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faTh} {...props} />\n);\n\nconst FireIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faFire} {...props} />\n);\n\nconst SquareIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faSquare} {...props} />\n);\n\nconst UserIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faUser} {...props} />\n);\n\nconst RobotIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faRobot} {...props} />\n);\n\nconst GhostIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faGhost} {...props} />\n);\n\nconst CharacterWrapper = styled.div<\n\tStyledProps<CharacterIconProps, 'size' | 'showName' | 'color'>\n>`\n\tposition: relative;\n\tpointer-events: none;\n\tmin-width: 50px;\n\n\t${({ $showName, $color }) => {\n\t\treturn `\n\t\t\t.name {\n\t\t\t\t${!$showName ? 'display: none;' : ''}\n\t\t\t\t${$color ? `background-color: ${$color} !important;` : ''}\n\t\t\t\t\n\t\t\t}\n\t\t`;\n\t}}\n\n\t${({ $size }) => {\n\t\treturn `\n\t\t\twidth: ${$size}px;\n\t\t\theight: ${$size}px;\n\n\t\t\t> div {\n\t\t\t\t/* Gotta override as char is taking coordinates by default */\n\t\t\t\ttop: ${$size / 2}px !important;\n\t\t\t\tleft: calc(50% - ${$size}px / 2) !important;\n\t\t\t}\n\t\t`;\n\t}}\n`;\n\ninterface CharacterIconProps extends Partial<SpriteCharacterProps> {\n\tsize: SpriteCharacterProps['size'];\n\tcolor?: string;\n\tshowName?: boolean;\n}\n\nconst CharacterIcon = ({\n\tsize,\n\tshowName = false,\n\tcolor,\n\t...rest\n}: CharacterIconProps) => {\n\treturn (\n\t\t<CharacterWrapper $size={size} $showName={showName} $color={color}>\n\t\t\t<SpriteCharacter\n\t\t\t\tcoordinates={{ top: 0, left: 0 }}\n\t\t\t\tid=\"P1\"\n\t\t\t\tname=\"Bomba-man\"\n\t\t\t\tsize={size}\n\t\t\t\t{...rest}\n\t\t\t/>\n\t\t</CharacterWrapper>\n\t);\n};\n\nconst DeadCharacterIcon = ({\n\tsize,\n\tshowName = false,\n\t...rest\n}: CharacterIconProps) => {\n\treturn (\n\t\t<CharacterWrapper $size={size} $showName={showName}>\n\t\t\t<DeadCharacter\n\t\t\t\tcoordinates={{ top: 0, left: 0 }}\n\t\t\t\tid=\"P1\"\n\t\t\t\tname=\"Bomba-man\"\n\t\t\t\texplodingDuration={0 as any}\n\t\t\t\tsize={size}\n\t\t\t\t{...rest}\n\t\t\t/>\n\t\t</CharacterWrapper>\n\t);\n};\n\nconst ICON_STYLE = { fontSize: 40, width: 50 };\nconst powerUpIconPack = generateIconPackFromPowerUps(ICON_STYLE);\n\nexport type { CharacterIconProps };\nexport {\n\tPowerUpIcon,\n\tCubeIcon,\n\tMapIcon,\n\tFireIcon,\n\tSquareIcon,\n\tUserIcon,\n\tRobotIcon,\n\tGhostIcon,\n\tCharacterIcon,\n\tDeadCharacterIcon,\n\tpowerUpIconPack,\n\tICON_STYLE,\n};\n","import { PowerUp } from 'enums';\nimport powerUpIcons from 'containers/Game/components/PowerUp/icons';\nimport { findEnumKeyFromValue } from 'utils';\nimport { FormComponent } from 'components/Form/types';\nimport { generateMarks } from 'utils/material-ui';\nimport { PartialConfigFormItems, PowerUpIcons } from './types';\nimport { powerUpIconPack } from './icons';\n\nconst generateIconPackFromPowerUps = (iconStyle: React.CSSProperties) => {\n\treturn Object.values(PowerUp).reduce<PowerUpIcons>((acc, key) => {\n\t\tconst { icon: Icon, color } = powerUpIcons[key];\n\n\t\tacc[key] = {\n\t\t\ticon: <Icon style={iconStyle} />,\n\t\t\tcolor,\n\t\t};\n\n\t\treturn acc;\n\t}, {} as PowerUpIcons);\n};\nconst generatePowerUpSection = (\n\tname: string,\n\tmax: number,\n\tmovementStops?: Array<number>\n) => {\n\treturn Object.values(PowerUp).map(powerUp => {\n\t\tconst label = `${findEnumKeyFromValue(PowerUp, powerUp)}`;\n\t\treturn {\n\t\t\ttype: FormComponent.Rating,\n\t\t\tlabel: `${label} (number)`,\n\t\t\tname: `${name}.${powerUp}`,\n\t\t\tmax,\n\t\t\t...powerUpIconPack[powerUp],\n\t\t\t...(movementStops &&\n\t\t\t\tpowerUp === PowerUp.MovementSpeed && {\n\t\t\t\t\tlabel: `${label} (action interval, milliseconds)`,\n\t\t\t\t\ttype: FormComponent.Slider,\n\t\t\t\t\tstep: null,\n\t\t\t\t\tmin: Math.min(...movementStops),\n\t\t\t\t\tmax: Math.max(...movementStops),\n\t\t\t\t\tmarks: generateMarks(movementStops),\n\t\t\t\t}),\n\t\t};\n\t}) as PartialConfigFormItems;\n};\n\nexport { generateIconPackFromPowerUps, generatePowerUpSection };\n","import { SliderProps } from '@material-ui/core';\n\nfunction generateMarks(stops: Array<number>): SliderProps['marks'];\nfunction generateMarks(min: number, max: number): SliderProps['marks'];\nfunction generateMarks(\n\tminOrStops: number | Array<number>,\n\tmaxOrNull?: number | undefined\n): SliderProps['marks'] {\n\t// if it's an array\n\tif (Array.isArray(minOrStops)) {\n\t\treturn minOrStops.map(value => ({\n\t\t\tvalue,\n\t\t\tlabel: value,\n\t\t}));\n\t}\n\tconst diff = (maxOrNull as number) - minOrStops;\n\treturn Array(diff + 1)\n\t\t.fill(0)\n\t\t.map((_, ind) => {\n\t\t\tconst value = minOrStops + ind;\n\t\t\treturn {\n\t\t\t\tvalue,\n\t\t\t\t...((ind === 0 || ind === diff) && { label: value }),\n\t\t\t};\n\t\t});\n}\n\nexport { generateMarks };\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tflex-wrap: wrap;\n`;\n\nexport default Container;\n"],"sourceRoot":""}