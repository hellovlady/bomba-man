{"version":3,"sources":["containers/App/created-by-numan.ts","enums.ts","components/Container/Container.tsx","utils/math.ts","utils/game.ts","utils/npc.ts","hooks/useInterval.tsx","hooks/usePrevious.tsx","store/redux/hooks/usePlayerEvents.tsx","containers/Game/GameContainer.tsx","theme.ts","components/Button/Button.tsx","utils/index.ts","containers/Game/GameButton.tsx","containers/Game/GameSettings.tsx","containers/Game/components/Cube.tsx","containers/Game/components/Bomb.tsx","containers/Game/components/SpriteCharacter.tsx","containers/Game/components/Character.tsx","animations.tsx","containers/Game/components/TileIcon.tsx","containers/Game/components/DeadCharacter.tsx","containers/Game/GameContent.tsx","containers/Game/components/Tile.tsx","containers/Game/components/PowerUp/icons.tsx","containers/Game/components/PowerUp/PowerUp.tsx","containers/Game/components/Map.tsx","containers/Game/GameMap.tsx","containers/Game/Game.tsx","utils/immer.ts","api/GameUpdater.ts","api/LocalGameUpdater.ts","api/GameUtils.ts","store/redux/reducers/game/constants.tsx","store/redux/reducers/game/reducer.tsx","store/redux/reducers/index.tsx","store/redux/index.ts","store/redux/reducers/game/selectors.tsx","store/redux/hooks/useGameProvider.tsx","store/redux/reducers/game/actions.tsx","store/redux/hooks/useLocalGame.tsx","store/firebase/index.tsx","containers/ThemeProvider/ThemeProvider.tsx","store/firebase/hooks/useWatchOnlineGame.tsx","containers/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["e","location","pathname","replace","trim","href","a","document","createElement","id","innerHTML","body","appendChild","n","textContent","head","append","Direction","Axis","ExplosionState","Player","Tile","PowerUp","Explosive","Container","styled","div","FIRE_VALUES","Object","values","filter","v","Bomb","getRandomInt","min","max","_max","_min","undefined","Math","floor","random","ExplosionDirection","topLeftCoordinatesToSquareCoordinates","movementSize","ySquare","top","xSquare","left","squareCoordinatesToTopLeftCoordinates","getSquareCoordinatesFromSquareOrTopLeftCoordinates","coordinates","_coordinates","getDefaultPlayerStartSquareCoordinates","mapSize","maxSize","P1","P2","P3","P4","generateRandomGameMap","blockTileChance","forbiddenCoordinates","_forbiddenCoordinates","defaultSquareCoordinates","xyDiff","reduce","acc","squareCoordinates","ind","currentDiff","push","i","getForbiddenStartCoordinates","tiles","keys","Array","fill","sizedArray","randomMap","accOuter","_","indOuter","accInner","__","indInner","length","forEach","Empty","generatePlayer","playerId","config","defaultKeyboardConfig","keyboardConfig","sizes","map","movement","getTopLeftCoordinatesFromSquareOrSquareCoordinates","state","deathCount","powerUps","powerUpKey","generateDefaultGameConfig","chance","defaults","Life","BombCount","BombSize","MovementSpeed","increaseValues","maxDropCount","character","tile","duration","bomb","firing","exploding","MoveUp","KeyCode","MoveRight","MoveDown","MoveLeft","DropBomb","generateDefaultGameState","_config","blockDensity","players","gameMap","bombs","is3D","isSideView","animationCounter","isSquareOutOfBoundaries","maxTopLeft","canMove","newSquareCoordinates","nextSquare","Breaking","NonBreaking","isSquareAnObstacle","CUBE_BASE_TRANSFORM","ROTATION_REGEX","X","REPLACE","FIND","Y","handleRotateMove","characterRef","direction","movementSpeed","style","transition","transform","originalTransform","rotate","side","DOWN","LEFT","UP","rotateMove","handleMove","onComplete","ref","playerConfig","newTop","newLeft","RIGHT","setTimeout","newCoordinates","Store","NPCScore","getTilesToBreak","tilesToBreak","isSquareOutsideBoundaries","squareCoordinate","getExplosionSquareCoordinatesFromBomb","explosionSize","checkOnlyFire","bombX","bombY","bombSquareCoordinates","explosionCoordinates","HORIZONTAL","VERTICAL","CORE","pushCurrentCoordinates","explosionDirection","directions","currentX","currentY","currentDirection","shouldContinue","j","xDiff","yDiff","currentSquare","FireHorizontal","FireVertical","getExplosionResults","bombCoordinates","coordinatesToSetOnFire","explosionSquares","getPoweredUpValue","playerState","type","powerUpConfig","isPowerUp","square","includes","isPlayerDead","isDifferentSquare","oldCoordinates","newYSquare","newXSquare","oldYSquare","oldXSquare","isAdjacent","dropBombAndRunOrScoreTarget","targetScore","runScore","currentTime","Date","getTime","lastBombTime","bombDuration","dropBomb","generateScore","level","newSquare","currentSquareCoordinates","_fireCoordinates","flat","findIndex","fireSquareCoordinates","isSquareAPossibleFire","IsDanger","IsPowerUp","IsStuck","IsEmptyTile","score","IsPlayer","IsBreakingTile","IsNonBreakingTile","IsNonAdjacentNonBreakingTile","generateMovementTree","parentId","playerMovementTree","_newYSquare","_newXSquare","hasChildren","findNodeWithHighestScore","movementNodes","current","retVal","groupMovementNodesByParentId","movementNodesGroupedById","movementNode","movementNodeParentId","getTotalScoreOfAllNodes","movementTree","validMovementNodes","movementNodesGroupedByParentId","entries","groupParentId","_groupParentId","Number","nodeWithHighestScore","parentNodes","some","parentNode","findBestMove","currentCoordinates","useInterval","callback","delay","savedCallback","useRef","useEffect","setInterval","clearInterval","usePrevious","value","usePlayerRefs","playerRefs","getElementById","recalculate","useEvents","triggerMove","timeOutRef","keyMap","previousIs3D","move","playerKeyboardConfig","Boolean","getMoveDirectionFromKeyMap","handleActions","newTime","useKeyboardEvent","onKeyDown","onKeyUp","handleKeyEvent","isKeyDown","code","CODE_SPACE","preventDefault","registerKeys","window","addEventListener","removeEventListener","canPlayerTakeAction","player","usePlayerInterval","cb","playerActionSpeed","useMemo","MAX_SAFE_INTEGER","usePlayerActionSpeed","handleBombForPlayers","keyEventCode","IntervalWrapper","usePlayerEvents","provider","currentPlayer","bestMovementNode","npcAction","SettingsAndMap","CenteredDiv","$is3D","GameContainer","children","theme","palette","background","primary","secondary","color","error","warning","success","info","default","shape","borderRadius","padding","game","size","GlobalStyles","createGlobalStyle","$gameConfig","button","$variant","Button","variant","rest","$size","memo","sleep","Promise","r","GameButton","active","onClick","width","wordWrap","marginBottom","currentTarget","blur","GameSettings","generateNewCollisionCoordinates","togglePerspective","toggleDimension","toggleTwoPlayer","toggleNPC","NPC","player2IsOn","npcIsOn","buttons","label","disabled","CuboidSide","Cuboid","Cube","animate","backgroundColor","collisionIndex","className","_className","height","getTransform","deg","incrementalSpeedRotationKeyframes","keyframes","join","FiringBomb","FiringCubeBomb","firingDuration","explodingDuration","tileSize","triggerExplosion","onExplosionComplete","useState","Firing","explosionState","setExplosionState","bombIds","Exploding","bId","kaboom","bombSize","bombPadding","bombStyleProps","position","animationDuration","SpriteCharacter","name","highlight","setDirection","currentKeyDirection","setCurrentKeyDirection","lastMovementTime","isWalking","getDirection","keyCode","getMoveDirectionFromKeyboardCode","clearCurrentKey","handleKeyDown","newDirection","updateDirection","handleKeyUp","delayedCurrentTime","data-facing","data-walking","toString","data-highlight","zIndex","Character","_top","_left","props","bounceAnimation","withOpacity","TileIcon","$animationDelay","$top","$left","css","DeadIcon","icon","faBookDead","DeadCharacter","GameContent","isAlive","isSteppingOnFire","playerCoordinates","isPlayerSteppingOnFire","bombProps","Wrapper","attrs","$color","$collisionIndex","$animate","$fireSquare","fireSquare","x","y","rotateFrom","rotateTo","borderRadiusFrom","borderRadiusTo","fireAnimation","icons","faHeart","faBomb","faPrescriptionBottleAlt","faShoePrints","Icon","$isTopView","Map","isTopView","shouldAnimate","outer","outerInd","innerInd","hasCollision","TileEnum","key","squareSize","FireCore","GameMap","Game","playerIntervals","gameContainerProps","gameSettingProps","gameMapProps","gameContentProps","useGameProps","updateImmerDraft","draft","payload","GameUpdater","LocalGameUpdater","updateGameState","gameState","updatePlayers","addPlayer","updatePlayer","removePlayer","updatePlayerId","updatePlayerCoordinates","updatePlayerState","incrementPlayerPowerUp","powerUp","incrementPlayerDeathCount","updatePlayerPlayerKeyboardConfig","updateGameMap","incrementAnimationCounter","updateGameMapSquare","addBomb","removeBomb","bombId","addPowerUp","removePowerUp","toggleIs3D","toggleIsSideView","GameUtils","updaters","getPlayerState","getPowerUpOrNull","powerUpOrNull","powerUpChance","possiblePowerUpOrNulls","generatePowerUpOrNull","err","console","getBombCountForPlayer","getBombSizeForPlayer","getMovementSpeedForPlayer","getBombToTriggerFromExplosion","currentBombId","bombToTrigger","find","t","l","setSquare","populatePowerUps","powerUpCoordinates","handlePlayerExplosionHit","currentFireCoordinates","playerXSquare","playerYSquare","triggerChainExplosion","bombsToSkip","explosionToComplete","Set","currentBomb","horizontal","vertical","fireCoordinates","core","add","setGameState","startGame","endGame","setGameMap","animatableGameMap","makeMove","newCoordinateYSquare","newCoordinateXSquare","lastCoordinates","lastCoordinateYSquare","lastCoordinateXSquare","powerUpOrEmptyTile","generateBomb","explosionsToComplete","triggerGameAnimation","toggleGameDimension","toggleGamePerspective","toggleGameTwoPlayer","toggleGameNpc","KEY","DEFAULT_VALUES","SET_GAME_STATE","START_GAME","END_GAME","SET_GAME_MAP","MAKE_MOVE","TRIGGER_MOVE","DROP_BOMB","TRIGGER_EXPLOSION","ON_EXPLOSION_COMPLETE","TRIGGER_GAME_ANIMATION","TOGGLE_GAME_DIMENSION","TOGGLE_GAME_PERSPECTIVE","TOGGLE_GAME_TWO_PLAYER","TOGGLE_GAME_NPC","gameReducer","action","produce","gameUpdater","gameUtils","rootReducer","combineReducers","firebase","firebaseReducer","firestore","firestoreReducer","gameKey","configureStore","initialState","middleware","thunkMiddleware","enhancer","applyMiddleware","createStore","composeWithDevTools","selectGameProps","makeSelectGameConfig","createSelector","makeSelectGameState","useGameProvider","dispatch","useDispatch","useSelector","updateGameSettings","useCallback","triggerExplosionInGame","triggerAnimation","useLocalGame","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","reactReduxFirebaseConfig","userProfile","profileFactory","user","Error","profile","email","providerData","roles","ThemeProvider","gameConfig","store","LocalGame","gameProps","App","createFirestoreInstance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.39c979d9.chunk.js","sourcesContent":["// @ts-ignore\n// eslint-disable-next-line\n!function(){const e=location.pathname.replace(/\\//g,\"\").trim()||location.href,a=document.createElement(\"footer\");a.id=\"created-by-numan\",a.innerHTML=`<span> Created with <svg class=\"footer-heart\" focusable=\"false\" viewBox=\"0 0 24 24\" aria-hidden=\"true\"> <path d=\"M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"></path> </svg> by <a href=\"https://numanaral.github.io/?ref=${e}\">Numan Aral</a> </span>`,document.body.appendChild(a);const n=document.createElement(\"style\");n.textContent=\"footer#created-by-numan{z-index:9999;height:30px;width:100%;display:flex;align-items:center;justify-content:flex-end;position:fixed;background-color:#363c48;bottom:0}#created-by-numan span{display:flex;align-items:center;justify-content:flex-end;color:#fff;margin-right:1rem;font-size:13px}#created-by-numan svg{fill:#fb4a59;margin:0 5px;width:16px;animation:heartBeat .8s ease 0s infinite normal none running}#created-by-numan a{color:#51bcda;text-decoration:none;margin-left:6px}@keyframes heartBeat{0%{transform:scale(1)}20%{transform:scale(1.3)}32%{transform:scale(1)}48%{transform:scale(1.3)}80%{transform:scale(1)}to{transform:scale(1)}}\",document.head.append(n)}();","enum Direction {\n\tUP = 'Up',\n\tRIGHT = 'Right',\n\tDOWN = 'Down',\n\tLEFT = 'Left',\n}\n\nenum Axis {\n\tX = 'X',\n\tY = 'Y',\n}\n\nenum ExplosionState {\n\tFiring = 'Firing',\n\tExploding = 'Exploding',\n\tExploded = 'Exploded',\n}\n\nenum Player {\n\tP1 = 'P1',\n\tP2 = 'P2',\n\tP3 = 'P3',\n\tP4 = 'P4',\n\t// Npc1 = 'P3',\n\t// Npc2 = 'P4',\n\t// Npc3 = 'P5',\n}\n\nenum Tile {\n\tEmpty = 'T1',\n\tBreaking = 'T2',\n\tNonBreaking = 'T3',\n}\n\nenum PowerUp {\n\tLife = 'PU1',\n\tBombCount = 'PU2',\n\tBombSize = 'PU3',\n\tMovementSpeed = 'PU4',\n}\n\nenum Explosive {\n\tBomb = 'B',\n\tFireCore = 'FC',\n\tFireHorizontal = 'FH',\n\tFireVertical = 'FV',\n}\n\nconst FIRE_VALUES = Object.values(Explosive).filter(v => v !== Explosive.Bomb);\n\nexport {\n\tDirection,\n\tAxis,\n\tExplosionState,\n\tPlayer,\n\tTile,\n\tPowerUp,\n\tExplosive,\n\tFIRE_VALUES,\n};\n","import styled from 'styled-components';\n\nconst Container = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\n\nexport default Container;\n","function getRandomInt(max: number): number;\nfunction getRandomInt(min: number, max: number): number;\nfunction getRandomInt(min: number, max?: number | undefined) {\n\tconst _max = max || min;\n\tconst _min = (max !== undefined && min) || 0;\n\treturn Math.floor(Math.random() * (_max - _min)) + _min;\n}\n\nexport { getRandomInt };\n","import {\n\tCoordinates,\n\tGameMap,\n\tKeyMap,\n\tNextMoveProps,\n\tNonNullablePlayerRef,\n\tPlayerConfig,\n\tPlayerId,\n\tPlayerKeyboardConfig,\n\tPlayerRef,\n\tPlayers,\n\tPlayerState,\n\tPowerUpOrNull,\n\tPowerUps,\n\tSquare,\n\tSquareCoordinates,\n\tTopLeftCoordinates,\n} from 'containers/Game/types';\nimport {\n\tAxis,\n\tDirection,\n\tPowerUp,\n\tTile,\n\tExplosive,\n\tFIRE_VALUES,\n\tPlayer,\n} from 'enums';\nimport {\n\tOnMove,\n\tBomb,\n\tGameConfigRanges,\n\tGameState,\n\tGameConfig,\n} from 'store/redux/reducers/game/types';\nimport * as KeyCode from 'keycode-js';\nimport { getRandomInt } from './math';\n\n/**\n * Converts from pixel to square.\n *\n * @param coordinates Top Left Coordinates.\n * @returns Square version of the coordinates.\n */\nconst topLeftCoordinatesToSquareCoordinates = (\n\t{ top, left }: TopLeftCoordinates,\n\tmovementSize: GameConfigRanges.MovementSize\n) => {\n\treturn {\n\t\tySquare: top / movementSize,\n\t\txSquare: left / movementSize,\n\t};\n};\n\n/**\n * Converts from square to pixel.\n *\n * @param coordinates Square Coordinates.\n * @returns Pixel (top, left) version of the coordinates.\n */\nconst squareCoordinatesToTopLeftCoordinates = (\n\t{ xSquare, ySquare }: SquareCoordinates,\n\tmovementSize: GameConfigRanges.MovementSize\n): TopLeftCoordinates => {\n\treturn {\n\t\ttop: ySquare * movementSize,\n\t\tleft: xSquare * movementSize,\n\t};\n};\n\nconst getTopLeftCoordinatesFromSquareOrSquareCoordinates = (\n\tcoordinates: Coordinates,\n\tmovementSize: GameConfigRanges.MovementSize\n) => {\n\tlet top;\n\tlet left;\n\n\tif ((coordinates as SquareCoordinates).xSquare !== undefined) {\n\t\tconst _coordinates = squareCoordinatesToTopLeftCoordinates(\n\t\t\tcoordinates as SquareCoordinates,\n\t\t\tmovementSize\n\t\t);\n\t\ttop = _coordinates.top;\n\t\tleft = _coordinates.left;\n\t} else {\n\t\ttop = (coordinates as TopLeftCoordinates).top;\n\t\tleft = (coordinates as TopLeftCoordinates).left;\n\t}\n\treturn { top, left };\n};\n\nconst getSquareCoordinatesFromSquareOrTopLeftCoordinates = (\n\tcoordinates: Coordinates,\n\tmovementSize: GameConfigRanges.MovementSize\n) => {\n\tlet xSquare;\n\tlet ySquare;\n\n\tif ((coordinates as SquareCoordinates).xSquare !== undefined) {\n\t\txSquare = (coordinates as SquareCoordinates).xSquare;\n\t\tySquare = (coordinates as SquareCoordinates).ySquare;\n\t} else {\n\t\tconst _coordinates = topLeftCoordinatesToSquareCoordinates(\n\t\t\tcoordinates as TopLeftCoordinates,\n\t\t\tmovementSize\n\t\t);\n\t\txSquare = _coordinates.xSquare;\n\t\tySquare = _coordinates.ySquare;\n\t}\n\treturn { xSquare, ySquare };\n};\n\nconst getDefaultPlayerStartSquareCoordinates = (\n\tmapSize: GameConfigRanges.MapSize\n): Record<PlayerId, SquareCoordinates> => {\n\tconst minSize = 0;\n\tconst maxSize = mapSize - 1;\n\treturn {\n\t\tP1: { ySquare: minSize, xSquare: minSize },\n\t\tP2: { ySquare: minSize, xSquare: maxSize },\n\t\tP3: { ySquare: maxSize, xSquare: maxSize },\n\t\tP4: { ySquare: maxSize, xSquare: minSize },\n\t};\n};\n\nconst getForbiddenStartCoordinates = (\n\tmapSize: GameConfigRanges.MapSize\n): SquareCoordinateArray => {\n\tconst defaultSquareCoordinates = getDefaultPlayerStartSquareCoordinates(\n\t\tmapSize\n\t);\n\n\t// used to calculate the next square\n\t// value to add to currentX and currentY square coordinates\n\tconst xyDiff = [\n\t\t[1, 1], // TopLeft\n\t\t[-1, 1], // TopRight\n\t\t[-1, -1], // BottomRight\n\t\t[1, -1], // BottomLeft\n\t];\n\n\treturn Object.values(\n\t\tdefaultSquareCoordinates\n\t).reduce<SquareCoordinateArray>((acc, squareCoordinates, ind) => {\n\t\tconst { xSquare, ySquare } = squareCoordinates;\n\t\tconst currentDiff = xyDiff[ind];\n\t\t// player's coordinate\n\t\tacc.push(squareCoordinates);\n\t\tfor (let i = 0; i < 2; i++) {\n\t\t\t// horizontal adjacent square coordinate\n\t\t\tif (i === 0) {\n\t\t\t\tacc.push({\n\t\t\t\t\txSquare: xSquare + currentDiff[i],\n\t\t\t\t\tySquare,\n\t\t\t\t});\n\t\t\t\t// vertical adjacent square coordinate\n\t\t\t} else {\n\t\t\t\tacc.push({\n\t\t\t\t\txSquare,\n\t\t\t\t\tySquare: ySquare + currentDiff[i],\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn acc;\n\t}, []);\n};\n\nconst generateRandomGameMap = (\n\tmapSize: GameConfigRanges.MapSize,\n\tblockTileChance: GameConfigRanges.BlockTileChance,\n\tforbiddenCoordinates?: SquareCoordinateArray\n): GameMap => {\n\tconst _forbiddenCoordinates =\n\t\tforbiddenCoordinates || getForbiddenStartCoordinates(mapSize);\n\tconst tiles: Array<KeysOf<typeof Tile>> = [\n\t\t...Object.keys(Tile),\n\t\t// reverse block density, we want that many Emptys\n\t\t...Array(11 - blockTileChance).fill('Empty'),\n\t];\n\tconst sizedArray = Array(mapSize).fill(0);\n\n\tconst randomMap = sizedArray.reduce((accOuter, _, indOuter) => {\n\t\taccOuter[indOuter] = sizedArray.reduce((accInner, __, indInner) => {\n\t\t\taccInner[indInner] = Tile[tiles[getRandomInt(tiles.length)]];\n\t\t\treturn accInner;\n\t\t}, {});\n\t\treturn accOuter;\n\t}, {});\n\t// ensure we don't fill the char beginning squares with blocks\n\t_forbiddenCoordinates.forEach(({ ySquare, xSquare }) => {\n\t\tif (randomMap[ySquare][xSquare] !== Tile.Empty) {\n\t\t\trandomMap[ySquare][xSquare] = Tile.Empty;\n\t\t}\n\t});\n\n\treturn randomMap;\n};\n\nconst getDefaultPowerUps = () => {\n\treturn Object.values(PowerUp).reduce<DynamicObject>((acc, powerUpKey) => {\n\t\tacc[powerUpKey] = 0;\n\t\treturn acc;\n\t}, {}) as PowerUps;\n};\n\nconst generatePlayer = (\n\tplayerId: PlayerId,\n\tconfig: GameConfig,\n\tcoordinates?: Coordinates\n): PlayerConfig => {\n\tconst {\n\t\tkeyboardConfig: { [playerId]: defaultKeyboardConfig },\n\t\tsizes: { map: mapSize, movement: movementSize },\n\t} = config;\n\n\t// eslint-disable-next-line max-len\n\tconst topLeftCoordinates = getTopLeftCoordinatesFromSquareOrSquareCoordinates(\n\t\tcoordinates ||\n\t\t\tgetDefaultPlayerStartSquareCoordinates(mapSize)[playerId],\n\t\tmovementSize\n\t);\n\n\treturn {\n\t\tid: playerId,\n\t\tcoordinates: topLeftCoordinates,\n\t\tstate: {\n\t\t\tdeathCount: 0,\n\t\t\tpowerUps: getDefaultPowerUps(),\n\t\t},\n\t\tkeyboardConfig: defaultKeyboardConfig,\n\t};\n};\n\nconst generatePlayers = (\n\tconfig: GameConfig\n): Record<PlayerId, PlayerConfig> => {\n\tconst defaultCoordinates = getDefaultPlayerStartSquareCoordinates(\n\t\tconfig.sizes.map\n\t);\n\n\treturn {\n\t\tP1: generatePlayer(Player.P1, config, defaultCoordinates.P1),\n\t\tP2: generatePlayer(Player.P2, config, defaultCoordinates.P2),\n\t\tP3: generatePlayer(Player.P3, config, defaultCoordinates.P3),\n\t\tP4: generatePlayer(Player.P4, config, defaultCoordinates.P4),\n\t};\n};\n\nconst generateDefaultGameConfig = (): GameConfig => {\n\treturn {\n\t\tpowerUps: {\n\t\t\tchance: 5,\n\t\t\tdefaults: {\n\t\t\t\t[PowerUp.Life]: 1,\n\t\t\t\t[PowerUp.BombCount]: 1,\n\t\t\t\t[PowerUp.BombSize]: 1,\n\t\t\t\t[PowerUp.MovementSpeed]: 200,\n\t\t\t},\n\t\t\tincreaseValues: {\n\t\t\t\t[PowerUp.Life]: 1,\n\t\t\t\t[PowerUp.BombCount]: 1,\n\t\t\t\t[PowerUp.BombSize]: 1,\n\t\t\t\t[PowerUp.MovementSpeed]: -15,\n\t\t\t},\n\t\t\tmaxDropCount: {\n\t\t\t\t[PowerUp.Life]: 4,\n\t\t\t\t[PowerUp.BombCount]: 6,\n\t\t\t\t[PowerUp.BombSize]: 6,\n\t\t\t\t[PowerUp.MovementSpeed]: 5,\n\t\t\t},\n\t\t},\n\t\ttiles: {\n\t\t\tblockTileChance: 1,\n\t\t},\n\t\tsizes: {\n\t\t\tmap: 15,\n\t\t\tcharacter: 32,\n\t\t\ttile: 32,\n\t\t\tmovement: 32,\n\t\t},\n\t\tduration: {\n\t\t\tbomb: {\n\t\t\t\tfiring: 2,\n\t\t\t\texploding: 1,\n\t\t\t},\n\t\t},\n\t\tkeyboardConfig: {\n\t\t\tP1: {\n\t\t\t\tMoveUp: KeyCode.CODE_W,\n\t\t\t\tMoveRight: KeyCode.CODE_D,\n\t\t\t\tMoveDown: KeyCode.CODE_S,\n\t\t\t\tMoveLeft: KeyCode.CODE_A,\n\t\t\t\tDropBomb: KeyCode.CODE_SPACE,\n\t\t\t},\n\t\t\tP2: {\n\t\t\t\tMoveUp: KeyCode.CODE_UP,\n\t\t\t\tMoveRight: KeyCode.CODE_RIGHT,\n\t\t\t\tMoveDown: KeyCode.CODE_DOWN,\n\t\t\t\tMoveLeft: KeyCode.CODE_LEFT,\n\t\t\t\tDropBomb: KeyCode.CODE_SEMICOLON,\n\t\t\t},\n\t\t},\n\t};\n};\n\nconst generateDefaultGameState = (config?: GameConfig): GameState => {\n\tconst _config = config || generateDefaultGameConfig();\n\tconst {\n\t\tsizes: { map: mapSize },\n\t\ttiles: { blockTileChance: blockDensity },\n\t} = _config;\n\treturn {\n\t\tplayers: {\n\t\t\tP1: generatePlayer(Player.P1, _config),\n\t\t},\n\t\tgameMap: generateRandomGameMap(mapSize, blockDensity),\n\t\tbombs: {},\n\t\tpowerUps: {},\n\t\tconfig: generateDefaultGameConfig(),\n\t\tis3D: false,\n\t\tisSideView: false,\n\t\tanimationCounter: 0,\n\t};\n};\n\nconst isSquareAnObstacle = (\n\tgameMap: GameMap,\n\t{ xSquare, ySquare }: SquareCoordinates\n) => {\n\tconst nextSquare = gameMap[ySquare]?.[xSquare];\n\n\treturn (\n\t\tnextSquare === Tile.Breaking ||\n\t\tnextSquare === Tile.NonBreaking ||\n\t\tnextSquare === Explosive.Bomb\n\t);\n};\n\nconst isSquareOutOfBoundaries = (\n\t{ xSquare, ySquare }: SquareCoordinates,\n\tmapSize: GameConfigRanges.MapSize\n) => {\n\tconst minTopLeft = 0;\n\tconst maxTopLeft = mapSize - 1;\n\n\tconst beyondHorizontalEnd = xSquare < minTopLeft || xSquare > maxTopLeft;\n\tconst beyondVerticalEnd = ySquare < minTopLeft || ySquare > maxTopLeft;\n\n\treturn beyondHorizontalEnd || beyondVerticalEnd;\n};\n\nconst canMove = (\n\tcoordinates: Coordinates,\n\tgameMap: GameMap,\n\t{ map: mapSize, movement: movementSize }: GameConfig['sizes']\n) => {\n\t// eslint-disable-next-line max-len\n\tconst newSquareCoordinates = getSquareCoordinatesFromSquareOrTopLeftCoordinates(\n\t\tcoordinates,\n\t\tmovementSize\n\t);\n\treturn (\n\t\t!isSquareAnObstacle(gameMap, newSquareCoordinates) &&\n\t\t!isSquareOutOfBoundaries(newSquareCoordinates, mapSize)\n\t);\n};\n\nconst CUBE_BASE_TRANSFORM = `translateZ(calc(var(--tile-size) / 2 * 1px)) rotateX(0deg) rotateY(0deg) scale(1, 1)`;\n/**\n * Since we are moving a flat plane and not a cube, the logical sense of\n * rotating a cube doesn't work. Different type of rotations do no always\n * help. One solution is resetting the rotation to 0 so the rotation\n * movement is smooth on each rotation without worrying about boundaries.\n *\n * NOTE: We need to be aware of the animation cancelling\n *\n * @param characterRef ref object\n */\nconst resetRotation = (characterRef: NonNullable<PlayerRef>) => {\n\t// disable animation\n\tcharacterRef.style.transition = '0ms';\n\t// reset\n\tcharacterRef.style.transform = CUBE_BASE_TRANSFORM;\n};\n\nconst ROTATION_REGEX = {\n\t[Axis.X]: {\n\t\tREPLACE: /rotateX\\(-?\\d+deg\\)/g,\n\t\tFIND: /rotateX\\((?<degree>-?\\d+)deg\\)/,\n\t},\n\t[Axis.Y]: {\n\t\tREPLACE: /rotateY\\(-?\\d+deg\\)/g,\n\t\tFIND: /rotateY\\((?<degree>-?\\d+)deg\\)/,\n\t},\n};\n\nconst rotateMove = (originalTransform: string, direction: Direction) => {\n\tlet rotate = 90;\n\tlet side = Axis.Y;\n\tif (direction === Direction.DOWN || direction === Direction.LEFT) {\n\t\trotate *= -1;\n\t}\n\tif (direction === Direction.UP || direction === Direction.DOWN) {\n\t\tside = Axis.X;\n\t}\n\n\treturn originalTransform.replace(\n\t\tROTATION_REGEX[side].REPLACE,\n\t\t`rotate${side}(${rotate}deg)`\n\t);\n};\n\nconst handleRotateMove = (\n\tcharacterRef: NonNullablePlayerRef,\n\tdirection: Direction,\n\tmovementSpeed: number\n) => {\n\t/* eslint-disable no-param-reassign */\n\t// enable animation\n\tcharacterRef.style.transition = `${movementSpeed}ms`;\n\t// move\n\tcharacterRef.style.transform = rotateMove(\n\t\tcharacterRef.style.transform,\n\t\tdirection\n\t);\n\t/* eslint-enable no-param-reassign */\n};\n\nconst handleMove = (\n\t{\n\t\tplayerConfig: {\n\t\t\tid: playerId,\n\t\t\tcoordinates: { top, left },\n\t\t},\n\t\tdirection,\n\t\tis3D,\n\t\tgameMap,\n\t}: NextMoveProps,\n\tmovementSpeed: number,\n\tonComplete: OnMove,\n\tref: NonNullablePlayerRef,\n\tsizes: GameConfig['sizes']\n) => {\n\tif (!direction) return;\n\n\tconst { movement } = sizes;\n\n\tlet newTop = top;\n\tlet newLeft = left;\n\tswitch (direction) {\n\t\tcase Direction.UP:\n\t\t\tnewTop = top - movement;\n\t\t\tbreak;\n\t\tcase Direction.RIGHT:\n\t\t\tnewLeft = left + movement;\n\t\t\tbreak;\n\t\tcase Direction.DOWN:\n\t\t\tnewTop = top + movement;\n\t\t\tbreak;\n\t\tcase Direction.LEFT:\n\t\t\tnewLeft = left - movement;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t// do nothing\n\t\t\tbreak;\n\t}\n\n\tif (!canMove({ top: newTop, left: newLeft }, gameMap, sizes)) return;\n\n\tif (is3D) resetRotation(ref);\n\t// TODO: Do a write-up on this\n\t// this complexity is required for a smooth 3d rotate move\n\t// since we are resetting rotation css, we need an async\n\t// event so that the animation can display smoothly\n\tsetTimeout(() => {\n\t\tif (is3D) handleRotateMove(ref, direction, movementSpeed);\n\t\tonComplete({\n\t\t\tplayerId,\n\t\t\tnewCoordinates: { top: newTop, left: newLeft },\n\t\t});\n\t}, 0);\n};\n\n/**\n * Gets the scale size for an explosion size.\n * - `explosionSize + 1`: explosion size is exclusive of the current square\n * - `* 2`: explosion goes both ways\n * - `- 1`: don't count the root square twice\n * - `* 2`: revert the padding\n *\n * @param explosionSize Size of the explosion.\n * @returns Scale size.\n */\nconst getExplosionScaleSize = (explosionSize: number) => {\n\treturn ((explosionSize + 1) * 2 - 1) * 2;\n};\n\ntype SquareCoordinateArray = Array<SquareCoordinates>;\ntype TilesToBreak = SquareCoordinateArray;\nenum ExplosionDirection {\n\tHORIZONTAL = 'horizontal',\n\tVERTICAL = 'vertical',\n\tCORE = 'core',\n}\ntype CoordinatesToSetOnFire = {\n\t[ExplosionDirection.HORIZONTAL]: SquareCoordinateArray;\n\t[ExplosionDirection.VERTICAL]: SquareCoordinateArray;\n\t[ExplosionDirection.CORE]: SquareCoordinateArray;\n};\n\nconst getTilesToBreak = (\n\tgameMap: GameMap,\n\tySquare: number,\n\txSquare: number\n) => {\n\tconst tilesToBreak: TilesToBreak = [];\n\tif (gameMap[ySquare][xSquare] === Tile.Breaking) {\n\t\ttilesToBreak.push({ ySquare, xSquare });\n\t}\n\n\treturn tilesToBreak;\n};\n\nconst isSquareOutsideBoundaries = (\n\tsquareCoordinate: number,\n\tmapSize: GameConfigRanges.MapSize\n) => {\n\treturn squareCoordinate < 0 || squareCoordinate >= mapSize;\n};\n\nconst getExplosionSquareCoordinatesFromBomb = (\n\tgameMap: GameMap,\n\tcoordinates: Coordinates,\n\texplosionSize: number,\n\t{ map: mapSize, movement: movementSize }: GameConfig['sizes'],\n\t/** only returns fire locations */\n\tcheckOnlyFire = false\n) => {\n\t/* \n\t\t===========================\n\t\t# LOGIC\n\t\t===========================\n\t\t> Legend\n\t\t\t- Empty = 'T1',\n\t\t\t- Breaking = 'T2',\n\t\t\t- NonBreaking = 'T3',\n\t\t\t- Bomb = 'B',\n\t\t> Config\n\t\t\t- bombSize = 3\n\t\t> Current Test Row\n\t\t \t- [T1, T1, T3, B, T1, T2, T2]\n\t\t \t\t\t\t       ^  ^ these ones\n\t\t> Check neighbors (<>: check, x: stop on side):\n\t\t \t- [T1, T1, T3, <B>, T1, T2, T2]\n\n\t\t \t- [T1, T1, T3, <B, T1>, T2, T2]\n\t\t\t\t\t\tx\n\t\t\t- [T1, T1, T3, <B, T1, T2>, T2]\n\n\t\t\t- [T1, T1, T3, <B, T1, T2>, T2]\n\t\t\t\t\t\t\t\t\t\tx\n\n\t\t> Stop checking when you hit a T2 or T3\n\t\t\t- If T2, include it in the list\n\t\t\n\t*/\n\n\tconst {\n\t\txSquare: bombX,\n\t\tySquare: bombY,\n\t} = getSquareCoordinatesFromSquareOrTopLeftCoordinates(\n\t\tcoordinates,\n\t\tmovementSize\n\t);\n\tconst bombSquareCoordinates = { xSquare: bombX, ySquare: bombY };\n\tconst explosionCoordinates: CoordinatesToSetOnFire = {\n\t\t[ExplosionDirection.HORIZONTAL]: [],\n\t\t[ExplosionDirection.VERTICAL]: [],\n\t\t[ExplosionDirection.CORE]: [bombSquareCoordinates],\n\t};\n\n\tconst pushCurrentCoordinates = (\n\t\txSquare: number,\n\t\tySquare: number,\n\t\texplosionDirection: ExplosionDirection\n\t) => {\n\t\texplosionCoordinates[explosionDirection].push({\n\t\t\txSquare,\n\t\t\tySquare,\n\t\t});\n\t};\n\n\t// used to calculate the next square\n\t// value to add to currentX and currentY square coordinates\n\tconst xyDiff = [\n\t\t[0, -1], // Up\n\t\t[1, 0], // Right\n\t\t[0, 1], // Down\n\t\t[-1, 0], // Left\n\t];\n\n\t// required for proper animation\n\t// (expanding in scale X or Y)\n\tconst directions = [\n\t\tExplosionDirection.VERTICAL,\n\t\tExplosionDirection.HORIZONTAL,\n\t\tExplosionDirection.VERTICAL,\n\t\tExplosionDirection.HORIZONTAL,\n\t];\n\n\t// check all sides\n\tfor (let i = 0; i < 4; i++) {\n\t\tlet currentX = bombX;\n\t\tlet currentY = bombY;\n\t\tconst currentDirection = directions[i];\n\t\tlet shouldContinue = true;\n\n\t\t// loop until the end of the explosion\n\t\tfor (let j = 0; j < explosionSize; j++) {\n\t\t\tif (!shouldContinue) continue;\n\n\t\t\tconst [xDiff, yDiff] = xyDiff[i];\n\t\t\tcurrentX += xDiff;\n\t\t\tcurrentY += yDiff;\n\n\t\t\t// don't go out of boundaries\n\t\t\tif (\n\t\t\t\tisSquareOutsideBoundaries(currentX, mapSize) ||\n\t\t\t\tisSquareOutsideBoundaries(currentY, mapSize)\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst currentSquare = gameMap[currentY][currentX];\n\t\t\tif (checkOnlyFire) {\n\t\t\t\t// if it's not a fire, then we reached the end\n\t\t\t\tif (\n\t\t\t\t\tcurrentSquare !== Explosive.FireHorizontal &&\n\t\t\t\t\tcurrentSquare !== Explosive.FireVertical\n\t\t\t\t) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tpushCurrentCoordinates(currentX, currentY, currentDirection);\n\t\t\t}\n\t\t\tswitch (currentSquare) {\n\t\t\t\tcase Tile.Breaking:\n\t\t\t\t\tpushCurrentCoordinates(\n\t\t\t\t\t\tcurrentX,\n\t\t\t\t\t\tcurrentY,\n\t\t\t\t\t\tcurrentDirection\n\t\t\t\t\t);\n\t\t\t\t\tshouldContinue = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase Tile.NonBreaking:\n\t\t\t\t\tshouldContinue = false;\n\t\t\t\t\tbreak;\n\t\t\t\t// Tile.Empty, Explosive.Bomb, Player.[any], PowerUps.[any]\n\t\t\t\tdefault:\n\t\t\t\t\tpushCurrentCoordinates(\n\t\t\t\t\t\tcurrentX,\n\t\t\t\t\t\tcurrentY,\n\t\t\t\t\t\tcurrentDirection\n\t\t\t\t\t);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn explosionCoordinates;\n};\n\n/**\n * Breaking tiles are \"exploded\" and removed from the map.\n *\n * @param gameMap Current state of the game map.\n * @param bombCoordinates TopLeft coordinates of where the bomb is placed.\n * @param explosionSize Size of the explosion.\n * @returns New state for the game map with breaking tiles emptied.\n */\nconst getExplosionResults = (\n\tgameMap: GameMap,\n\tplayers: Players,\n\tbombCoordinates: TopLeftCoordinates,\n\texplosionSize: number,\n\tsizes: GameConfig['sizes'],\n\t/** only returns fire locations */\n\tcheckOnlyFire = false\n) => {\n\tconst tilesToBreak: TilesToBreak = [];\n\tconst coordinatesToSetOnFire: CoordinatesToSetOnFire = {\n\t\t[ExplosionDirection.HORIZONTAL]: [],\n\t\t[ExplosionDirection.VERTICAL]: [],\n\t\t[ExplosionDirection.CORE]: [],\n\t};\n\n\tconst explosionSquares = getExplosionSquareCoordinatesFromBomb(\n\t\tgameMap,\n\t\tbombCoordinates,\n\t\texplosionSize,\n\t\tsizes,\n\t\tcheckOnlyFire\n\t);\n\t// { horizontal, vertical }\n\t(Object.keys(explosionSquares) as Array<ExplosionDirection>).forEach(\n\t\texplosionDirection => {\n\t\t\texplosionSquares[explosionDirection].forEach(\n\t\t\t\t({ ySquare, xSquare }) => {\n\t\t\t\t\tcoordinatesToSetOnFire[explosionDirection].push({\n\t\t\t\t\t\txSquare,\n\t\t\t\t\t\tySquare,\n\t\t\t\t\t});\n\t\t\t\t\tgetTilesToBreak(gameMap, ySquare, xSquare).forEach(v => {\n\t\t\t\t\t\ttilesToBreak.push(v);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t);\n\n\treturn { coordinatesToSetOnFire, tilesToBreak };\n};\n\nconst getPoweredUpValue = (\n\tplayerState: PlayerState,\n\ttype: PowerUp,\n\tpowerUpConfig: GameConfig['powerUps']\n) => {\n\treturn (\n\t\tpowerUpConfig.defaults[type] +\n\t\tplayerState.powerUps[type] * powerUpConfig.increaseValues[type]\n\t);\n};\n\nconst generateBomb = (\n\t{\n\t\tid: playerId,\n\t\tcoordinates: { top, left },\n\t\tstate: playerState,\n\t}: PlayerConfig,\n\tpowerUpConfig: GameConfig['powerUps']\n) => {\n\tconst explosionSize = getPoweredUpValue(\n\t\tplayerState,\n\t\tPowerUp.BombSize,\n\t\tpowerUpConfig\n\t);\n\tconst bomb: Bomb = {\n\t\tid: new Date().getTime().toString(),\n\t\texplosionSize,\n\t\ttop,\n\t\tleft,\n\t\tplayerId,\n\t};\n\treturn bomb;\n};\n\nconst getMoveDirectionFromKeyboardCode = (\n\tkeyCode: string,\n\t{ MoveUp, MoveRight, MoveDown, MoveLeft }: PlayerKeyboardConfig\n) => {\n\tswitch (true) {\n\t\tcase keyCode === MoveUp:\n\t\t\treturn Direction.UP;\n\t\tcase keyCode === MoveRight:\n\t\t\treturn Direction.RIGHT;\n\t\tcase keyCode === MoveDown:\n\t\t\treturn Direction.DOWN;\n\t\tcase keyCode === MoveLeft:\n\t\t\treturn Direction.LEFT;\n\t\tdefault:\n\t\t\treturn null;\n\t}\n};\n\nconst getMoveDirectionFromKeyMap = (\n\tkeyMap: React.MutableRefObject<KeyMap>,\n\t{ MoveUp, MoveRight, MoveDown, MoveLeft }: PlayerKeyboardConfig,\n\tmulti = false\n) => {\n\treturn (multi\n\t\t? // record and play all keys that being held\n\t\t  [\n\t\t\t\tkeyMap.current[MoveUp] && Direction.UP,\n\t\t\t\tkeyMap.current[MoveRight] && Direction.RIGHT,\n\t\t\t\tkeyMap.current[MoveDown] && Direction.DOWN,\n\t\t\t\tkeyMap.current[MoveLeft] && Direction.LEFT,\n\t\t  ]\n\t\t: // handle single key down\n\t\t  [\n\t\t\t\t(keyMap.current[MoveUp] && Direction.UP) ||\n\t\t\t\t\t(keyMap.current[MoveRight] && Direction.RIGHT) ||\n\t\t\t\t\t(keyMap.current[MoveDown] && Direction.DOWN) ||\n\t\t\t\t\t(keyMap.current[MoveLeft] && Direction.LEFT),\n\t\t  ]\n\t).filter(Boolean) as Array<Direction>;\n};\n\nconst generatePowerUpOrNull = (\n\tpowerUpChance: GameConfigRanges.PowerUpChance\n) => {\n\tconst possiblePowerUpOrNulls: Array<KeysOf<KeysOf<PowerUpOrNull>>> = [\n\t\t...Object.values(PowerUp),\n\t\t// reverse block density, we want that many nulls\n\t\t...Array(6 - powerUpChance).fill(null),\n\t];\n\n\treturn possiblePowerUpOrNulls[getRandomInt(possiblePowerUpOrNulls.length)];\n};\n\nconst isPowerUp = (square: Square) => {\n\treturn Object.values(PowerUp).includes(square as PowerUp);\n};\n\nconst isPlayerSteppingOnFire = (\n\tgameMap: GameMap,\n\tplayerCoordinates: TopLeftCoordinates,\n\tmovementSize: GameConfigRanges.MovementSize\n) => {\n\tconst { xSquare, ySquare } = topLeftCoordinatesToSquareCoordinates(\n\t\tplayerCoordinates,\n\t\tmovementSize\n\t);\n\tconst currentSquare = gameMap[ySquare][xSquare];\n\n\treturn FIRE_VALUES.includes(currentSquare as Explosive);\n};\n\nconst isPlayerDead = (\n\tplayerState: PlayerState,\n\tpowerUpConfig: GameConfig['powerUps']\n) => {\n\treturn (\n\t\tplayerState.deathCount >=\n\t\tgetPoweredUpValue(playerState, PowerUp.Life, powerUpConfig)\n\t);\n};\n\nexport {\n\tgenerateRandomGameMap,\n\tgeneratePlayer,\n\tgeneratePlayers,\n\tgenerateDefaultGameState,\n\tisSquareAnObstacle,\n\tisSquareOutOfBoundaries,\n\tcanMove,\n\trotateMove,\n\thandleRotateMove,\n\thandleMove,\n\tresetRotation,\n\tCUBE_BASE_TRANSFORM,\n\tgetExplosionScaleSize,\n\tgetExplosionResults,\n\tgenerateBomb,\n\tgetMoveDirectionFromKeyboardCode,\n\tgetMoveDirectionFromKeyMap,\n\ttopLeftCoordinatesToSquareCoordinates,\n\tsquareCoordinatesToTopLeftCoordinates,\n\tgetTopLeftCoordinatesFromSquareOrSquareCoordinates,\n\tgetSquareCoordinatesFromSquareOrTopLeftCoordinates,\n\tgeneratePowerUpOrNull,\n\tisPowerUp,\n\tgetPoweredUpValue,\n\tisPlayerSteppingOnFire,\n\tisPlayerDead,\n};\n","import {\n\tGameMap,\n\tNPCActionFn,\n\tPlayers,\n\tSquare,\n\tSquareCoordinates,\n} from 'containers/Game/types';\nimport { Direction, Player, PowerUp, Tile } from 'enums';\nimport { Bombs, GameConfig } from 'store/redux/reducers/game/types';\nimport {\n\tgetExplosionResults,\n\tgetPoweredUpValue,\n\tgetSquareCoordinatesFromSquareOrTopLeftCoordinates,\n\tisSquareOutOfBoundaries,\n} from './game';\nimport { getRandomInt } from './math';\n\ntype NpcStore = {\n\tid: number;\n\tparentNodes: MovementNode[];\n\tlastBombTime: number;\n\tdropBomb: () => void;\n\tgameMap: GameMap;\n\tplayers: Players;\n\tbombs: Bombs;\n\tpowerUpConfig: GameConfig['powerUps'];\n\tsizes: GameConfig['sizes'];\n\tbombDuration: GameConfig['duration']['bomb'];\n} | null;\nlet Store: NpcStore;\n\ntype Score = number | undefined;\n\nenum NPCScore {\n\tIsDanger = -10000,\n\tIsNonBreakingTile = -100,\n\tIsNonAdjacentNonBreakingTile = -5,\n\tIsStuck = 0,\n\tIsEmptyTile = 2,\n\tIsBreakingTile = 3,\n\tIsPlayer = 4,\n\tIsPowerUp = 1000,\n}\n\ntype MovementNode = {\n\tscore: Score;\n\tparentId: number | null;\n\thasChildren: boolean;\n\tdirection: Direction;\n\tlevel: number;\n};\n\ntype MovementNodeWithKey = {\n\t[key: number]: MovementNode;\n};\n\nconst isDifferentSquare = (\n\tnewCoordinates: SquareCoordinates,\n\toldCoordinates: SquareCoordinates\n) => {\n\tconst { ySquare: newYSquare, xSquare: newXSquare } = newCoordinates;\n\tconst { ySquare: oldYSquare, xSquare: oldXSquare } = oldCoordinates;\n\n\treturn newYSquare !== oldYSquare || newXSquare !== oldXSquare;\n};\n\nconst isSquareAPlayer = (square: Square) => {\n\treturn Object.values<Square>(Player).includes(square);\n};\n\nconst isSquareAPossibleFire = (currentSquareCoordinates: SquareCoordinates) => {\n\tconst bombs = Object.values(Store!.bombs);\n\tif (!bombs.length) return false;\n\n\tconst _fireCoordinates: Array<SquareCoordinates> = [];\n\n\tbombs.forEach(({ playerId, top, left }) => {\n\t\tconst { players } = Store!;\n\t\tconst { coordinatesToSetOnFire } = getExplosionResults(\n\t\t\tStore!.gameMap,\n\t\t\tplayers,\n\t\t\t{ top, left },\n\t\t\tgetPoweredUpValue(\n\t\t\t\tplayers[playerId]!.state,\n\t\t\t\tPowerUp.BombSize,\n\t\t\t\tStore!.powerUpConfig\n\t\t\t),\n\t\t\tStore!.sizes\n\t\t);\n\t\tObject.values(coordinatesToSetOnFire)\n\t\t\t.flat()\n\t\t\t.forEach(squareCoordinates => {\n\t\t\t\t_fireCoordinates.push(squareCoordinates);\n\t\t\t});\n\t});\n\n\treturn (\n\t\t_fireCoordinates.findIndex(fireSquareCoordinates => {\n\t\t\treturn !isDifferentSquare(\n\t\t\t\tfireSquareCoordinates,\n\t\t\t\tcurrentSquareCoordinates\n\t\t\t);\n\t\t}) >= 0\n\t);\n};\n\nconst isAdjacent = (\n\t{ ySquare: newYSquare, xSquare: newXSquare }: SquareCoordinates,\n\t{ ySquare: oldYSquare, xSquare: oldXSquare }: SquareCoordinates\n) => {\n\treturn (\n\t\t// Directly top or below. If left coordinate is the same and it is +-1 top coordinate\n\t\t// Place a bomb\n\t\t(newXSquare === oldXSquare &&\n\t\t\t(newYSquare === oldYSquare + 1 || newYSquare === oldYSquare - 1)) ||\n\t\t// directly left or right. Same idea as above but for +1 left coordinate\n\t\t(newYSquare === oldYSquare &&\n\t\t\t(newXSquare === oldXSquare + 1 || newXSquare === oldXSquare - 1))\n\t);\n};\n\nconst dropBombAndRunOrScoreTarget = (\n\tnewCoordinates: SquareCoordinates,\n\toldCoordinates: SquareCoordinates,\n\ttargetScore: Score,\n\trunScore?: -100\n) => {\n\t// TODO: is this necessary? it's already the nextSquare\n\tif (isAdjacent(newCoordinates, oldCoordinates)) {\n\t\tconst currentTime = new Date().getTime();\n\t\tif (\n\t\t\tStore!.lastBombTime <=\n\t\t\tcurrentTime -\n\t\t\t\tObject.values(Store!.bombDuration).reduce(\n\t\t\t\t\t(acc, duration) => acc + duration,\n\t\t\t\t\t0\n\t\t\t\t) *\n\t\t\t\t\t1000\n\t\t) {\n\t\t\tStore!.dropBomb();\n\t\t\tStore!.lastBombTime = currentTime;\n\t\t}\n\t\treturn runScore;\n\t}\n\tif (isDifferentSquare(newCoordinates, oldCoordinates)) {\n\t\treturn targetScore;\n\t}\n\n\treturn null;\n};\n\nconst generateScore = (\n\tnewCoordinates: SquareCoordinates,\n\toldCoordinates: SquareCoordinates,\n\tlevel: number\n): number | undefined => {\n\tconst { ySquare: newYSquare, xSquare: newXSquare } = newCoordinates;\n\n\tif (isSquareOutOfBoundaries(newCoordinates, Store!.sizes.map)) {\n\t\treturn undefined;\n\t}\n\n\tconst newSquare = Store!.gameMap[newYSquare][newXSquare];\n\t// TODO: Please comment\n\tif (isSquareAPossibleFire(newCoordinates)) {\n\t\treturn NPCScore.IsDanger;\n\t}\n\tif (Object.values(PowerUp).includes(newSquare as PowerUp)) {\n\t\treturn NPCScore.IsPowerUp * level;\n\t}\n\tif (!isDifferentSquare(newCoordinates, oldCoordinates)) {\n\t\treturn NPCScore.IsStuck;\n\t}\n\tif (newSquare === Tile.Empty) {\n\t\treturn NPCScore.IsEmptyTile;\n\t}\n\tif (isSquareAPlayer(newSquare)) {\n\t\tconst score = dropBombAndRunOrScoreTarget(\n\t\t\tnewCoordinates,\n\t\t\toldCoordinates,\n\t\t\tNPCScore.IsPlayer\n\t\t);\n\t\tif (score !== null) return score;\n\t}\n\tif (newSquare === Tile.Breaking) {\n\t\tconst score = dropBombAndRunOrScoreTarget(\n\t\t\tnewCoordinates,\n\t\t\toldCoordinates,\n\t\t\tNPCScore.IsBreakingTile\n\t\t);\n\t\tif (score !== null) return score;\n\t}\n\tif (newSquare === Tile.NonBreaking) {\n\t\t// TODO: is this necessary? it's already the nextSquare\n\t\tif (isAdjacent(newCoordinates, oldCoordinates)) {\n\t\t\treturn NPCScore.IsNonBreakingTile;\n\t\t}\n\t\treturn NPCScore.IsNonAdjacentNonBreakingTile;\n\t}\n\n\treturn NPCScore.IsStuck;\n};\n\nconst generateMovementTree = (\n\tnewCoordinates: SquareCoordinates,\n\toldCoordinates: SquareCoordinates,\n\tlevel: number = 2,\n\tparentId: number | null = null\n) => {\n\tconst { ySquare: newYSquare, xSquare: newXSquare } = newCoordinates;\n\tlet playerMovementTree: MovementNodeWithKey = {};\n\n\tObject.values(Direction).forEach(direction => {\n\t\tlet _newYSquare = newYSquare;\n\t\tlet _newXSquare = newXSquare;\n\n\t\tStore!.id++;\n\n\t\tswitch (direction) {\n\t\t\tcase Direction.LEFT:\n\t\t\t\t_newXSquare--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.UP:\n\t\t\t\t_newYSquare--;\n\t\t\t\tbreak;\n\t\t\tcase Direction.RIGHT:\n\t\t\t\t_newXSquare++;\n\t\t\t\tbreak;\n\t\t\tcase Direction.DOWN:\n\t\t\t\t_newYSquare++;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\tconst score = generateScore(\n\t\t\t{ ySquare: _newYSquare, xSquare: _newXSquare },\n\t\t\toldCoordinates,\n\t\t\tlevel\n\t\t);\n\n\t\tplayerMovementTree[Store!.id] = {\n\t\t\tscore,\n\t\t\thasChildren: level > 0 && score !== undefined,\n\t\t\tparentId,\n\t\t\tdirection,\n\t\t\tlevel,\n\t\t};\n\t\tif (level > 0 && !!score) {\n\t\t\tplayerMovementTree = {\n\t\t\t\t...playerMovementTree,\n\t\t\t\t...generateMovementTree(\n\t\t\t\t\t{ ySquare: _newYSquare, xSquare: _newXSquare },\n\t\t\t\t\toldCoordinates,\n\t\t\t\t\tlevel - 1,\n\t\t\t\t\tStore!.id\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t});\n\n\treturn playerMovementTree!;\n};\n\nconst findNodeWithHighestScore = (movementNodes: MovementNode[]) => {\n\treturn movementNodes.reduce((acc, current) => {\n\t\tlet retVal = current;\n\t\tif (current.score === undefined) {\n\t\t\tretVal = acc;\n\t\t}\n\t\tif (acc.score! > current.score!) {\n\t\t\tretVal = acc;\n\t\t}\n\t\tif (acc.score! < current.score!) {\n\t\t\tretVal = current;\n\t\t}\n\t\tif (acc.score === current.score) {\n\t\t\tconst randomInt = getRandomInt(2);\n\t\t\tretVal = randomInt === 0 ? current : acc;\n\t\t}\n\n\t\treturn retVal;\n\t});\n};\n\nconst groupMovementNodesByParentId = (movementNodes: MovementNode[]) => {\n\tconst movementNodesGroupedById: { [key: number]: MovementNode[] } = {};\n\n\tmovementNodes.forEach(movementNode => {\n\t\tconst movementNodeParentId = movementNode.parentId!;\n\t\tif (movementNodesGroupedById[movementNodeParentId]) {\n\t\t\tmovementNodesGroupedById[movementNodeParentId].push(movementNode);\n\t\t} else {\n\t\t\tmovementNodesGroupedById[movementNodeParentId] = [movementNode];\n\t\t}\n\t});\n\treturn movementNodesGroupedById;\n};\n\nconst getTotalScoreOfAllNodes = (\n\tmovementTree: MovementNodeWithKey,\n\tparentId: number | undefined | null = undefined\n) => {\n\tlet validMovementNodes: MovementNode[];\n\n\tif (parentId !== null) {\n\t\tif (parentId === undefined) {\n\t\t\tvalidMovementNodes = Object.values(movementTree).filter(\n\t\t\t\tmovementNode => !movementNode.hasChildren\n\t\t\t);\n\t\t} else {\n\t\t\tvalidMovementNodes = Object.values(movementTree).filter(\n\t\t\t\tmovementNode =>\n\t\t\t\t\tmovementNode.parentId === movementTree[parentId!].parentId\n\t\t\t);\n\t\t}\n\n\t\tconst movementNodesGroupedByParentId = groupMovementNodesByParentId(\n\t\t\tvalidMovementNodes!\n\t\t);\n\n\t\tObject.entries(movementNodesGroupedByParentId).forEach(\n\t\t\t([groupParentId, movementNodes]) => {\n\t\t\t\tconst _groupParentId =\n\t\t\t\t\tgroupParentId === 'null' ? null : Number(groupParentId);\n\n\t\t\t\tconst nodeWithHighestScore = findNodeWithHighestScore(\n\t\t\t\t\tmovementNodes!\n\t\t\t\t);\n\n\t\t\t\tif (!_groupParentId) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t!Store!.parentNodes.some(\n\t\t\t\t\t\t\tparentNode =>\n\t\t\t\t\t\t\t\tparentNode.direction ===\n\t\t\t\t\t\t\t\tnodeWithHighestScore.direction\n\t\t\t\t\t\t)\n\t\t\t\t\t) {\n\t\t\t\t\t\tStore!.parentNodes.push(nodeWithHighestScore);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t\tmovementTree[_groupParentId].score =\n\t\t\t\t\t\tmovementTree[_groupParentId].score! +\n\t\t\t\t\t\t(nodeWithHighestScore.score!\n\t\t\t\t\t\t\t? nodeWithHighestScore.score\n\t\t\t\t\t\t\t: 0);\n\t\t\t\t\tgetTotalScoreOfAllNodes(movementTree, _groupParentId);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n};\n\nconst findBestMove = (\n\tcurrentCoordinates: SquareCoordinates\n): MovementNode | null => {\n\tStore!.id = 0;\n\tStore!.parentNodes = [];\n\n\tconst movementTree = generateMovementTree(\n\t\tcurrentCoordinates,\n\t\tcurrentCoordinates,\n\t\tundefined\n\t);\n\tgetTotalScoreOfAllNodes(movementTree);\n\n\treturn findNodeWithHighestScore(Store!.parentNodes);\n};\n\nconst npcAction: NPCActionFn = ({\n\tplayerId,\n\tplayers,\n\tgameMap,\n\tbombs,\n\ttriggerMove,\n\tdropBomb,\n\tref,\n\tpowerUpConfig,\n\tsizes,\n\tbombDuration,\n}) => {\n\tconst currentPlayer = players[playerId];\n\tStore = {\n\t\tid: 0,\n\t\tparentNodes: [],\n\t\tlastBombTime: 0,\n\t\tdropBomb: () => dropBomb(playerId),\n\t\tgameMap,\n\t\tbombs,\n\t\tplayers,\n\t\tpowerUpConfig,\n\t\tsizes,\n\t\tbombDuration,\n\t};\n\n\tif (!currentPlayer) return;\n\n\t// eslint-disable-next-line max-len\n\tconst currentSquareCoordinates = getSquareCoordinatesFromSquareOrTopLeftCoordinates(\n\t\tcurrentPlayer.coordinates,\n\t\tsizes.movement\n\t);\n\n\tconst bestMovementNode = findBestMove(currentSquareCoordinates);\n\n\tif ((bestMovementNode?.score || 0) > 0) {\n\t\ttriggerMove({ playerId, direction: bestMovementNode!.direction, ref });\n\t}\n};\n\nexport { npcAction };\n","import { useEffect, useRef } from 'react';\n\ntype Callback = () => void;\n\n/**\n * setInterval hook.\n *\n * @see https://overreacted.io/making-setinterval-declarative-with-react-hooks/#just-show-me-the-code\n *\n * @param callback Method to call in each interval.\n * @param delay Delay for interval.\n */\nconst useInterval = (callback: Callback, delay: number) => {\n\tconst savedCallback = useRef<Callback>();\n\n\t// Remember the latest callback.\n\tuseEffect(() => {\n\t\tsavedCallback.current = callback;\n\t}, [callback]);\n\n\t// Set up the interval.\n\tuseEffect(() => {\n\t\tconst tick = () => {\n\t\t\tsavedCallback.current?.();\n\t\t};\n\n\t\tconst id = setInterval(tick, delay);\n\t\treturn () => clearInterval(id);\n\t}, [delay]);\n};\n\nexport default useInterval;\n","import { useEffect, useRef } from 'react';\n\nconst usePrevious = (value: any) => {\n\tconst ref = useRef();\n\n\tuseEffect(() => {\n\t\tref.current = value;\n\t}, [value]);\n\n\treturn ref.current;\n};\n\nexport default usePrevious;\n","import {\n\tGameApi,\n\tKeyboardEventCode,\n\tKeyMap,\n\tNonNullablePlayerRef,\n\tOnDropBomb,\n\tPlayerId,\n\tPlayerKeyboardConfig,\n\tPlayers,\n} from 'containers/Game/types';\nimport { PowerUp } from 'enums';\nimport { useEffect, useMemo, useRef } from 'react';\nimport {\n\tgetMoveDirectionFromKeyMap,\n\tgetPoweredUpValue,\n\tisPlayerDead,\n} from 'utils/game';\nimport { npcAction } from 'utils/npc';\nimport useInterval from 'hooks/useInterval';\nimport usePrevious from 'hooks/usePrevious';\nimport { CODE_SPACE } from 'keycode-js';\nimport { GameConfig, OnTriggerMove } from '../reducers/game/types';\n\ntype HandleActionsFn = (playerId: PlayerId) => void;\ntype KeyDownAction = (playerId: PlayerId, keys: PlayerKeyboardConfig) => void;\n\ntype KeyAction = (keyEventCode: KeyboardEventCode) => void;\n\nconst usePlayerRefs = () => {\n\tconst playerRefs = useRef<{ [key in PlayerId]?: HTMLElement | null }>({\n\t\tP1: document.getElementById('P1'),\n\t\tP2: document.getElementById('P2'),\n\t\tP3: document.getElementById('P3'),\n\t\tP4: document.getElementById('P4'),\n\t});\n\n\tconst recalculate = () => {\n\t\tObject.keys(playerRefs.current).forEach(playerId => {\n\t\t\tplayerRefs.current[playerId as PlayerId] = document.getElementById(\n\t\t\t\tplayerId\n\t\t\t);\n\t\t});\n\t};\n\n\treturn { playerRefs, recalculate };\n};\n\nconst useEvents = ({\n\ttriggerMove,\n\tplayers,\n\ttimeOutRef,\n\tkeyMap,\n\tis3D,\n\tpowerUpConfig,\n}: {\n\ttriggerMove: OnTriggerMove;\n\tplayers: Players;\n\tkeyMap: React.MutableRefObject<KeyMap>;\n\ttimeOutRef: React.MutableRefObject<Record<PlayerId, number>>;\n\tis3D: boolean;\n\tpowerUpConfig: GameConfig['powerUps'];\n}) => {\n\tconst { playerRefs, recalculate } = usePlayerRefs();\n\tconst previousIs3D = usePrevious(is3D);\n\n\tuseEffect(() => {\n\t\tif (previousIs3D === is3D) return;\n\t\trecalculate();\n\t}, [is3D, previousIs3D, recalculate]);\n\n\tconst move: KeyDownAction = (playerId, playerKeyboardConfig) => {\n\t\tconst directions = getMoveDirectionFromKeyMap(\n\t\t\tkeyMap,\n\t\t\tplayerKeyboardConfig\n\t\t);\n\t\tif (!directions.length) return;\n\n\t\tdirections.forEach(direction => {\n\t\t\ttriggerMove({\n\t\t\t\tplayerId,\n\t\t\t\tdirection,\n\t\t\t\tref: playerRefs.current[playerId] as NonNullablePlayerRef,\n\t\t\t});\n\t\t});\n\t};\n\n\tconst handleActions = (playerId: PlayerId) => {\n\t\tif (!keyMap.current) return;\n\t\tif (!timeOutRef.current) return;\n\t\t// don't do anything if no key is being pressed\n\t\tif (!Object.values(keyMap.current).filter(Boolean).length) return;\n\n\t\tconst { keyboardConfig, state: playerState } = players[playerId]!;\n\t\tif (!keyboardConfig) return;\n\n\t\t// we only want to take this action for non-NPC players\n\t\tconst movementSpeed = getPoweredUpValue(\n\t\t\tplayerState,\n\t\t\tPowerUp.MovementSpeed,\n\t\t\tpowerUpConfig\n\t\t);\n\n\t\tconst ref = playerRefs.current[playerId];\n\t\tif (!ref) {\n\t\t\tplayerRefs.current[playerId] = document.getElementById(playerId);\n\t\t}\n\n\t\tif (ref) {\n\t\t\tconst newTime = new Date().getTime();\n\t\t\tif (newTime - timeOutRef.current[playerId]! > movementSpeed) {\n\t\t\t\ttimeOutRef.current[playerId] = newTime;\n\t\t\t\tmove(playerId, keyboardConfig);\n\t\t\t}\n\t\t}\n\t};\n\n\treturn { move, handleActions };\n};\n\nconst useKeyboardEvent = ({\n\tonKeyDown,\n\tonKeyUp,\n}: {\n\tonKeyDown?: KeyAction;\n\tonKeyUp?: KeyAction;\n} = {}) => {\n\tconst keyMap = useRef<KeyMap>({});\n\n\tuseEffect(() => {\n\t\tconst registerKeys = (e: KeyboardEvent, isKeyDown: boolean) => {\n\t\t\t/** @see https://stackoverflow.com/questions/5203407/how-to-detect-if-multiple-keys-are-pressed-at-once-using-javascript#answer-12444641 */\n\t\t\tkeyMap.current[e.code as KeyboardEventCode] = isKeyDown;\n\t\t};\n\n\t\tconst handleKeyEvent = (e: KeyboardEvent) => {\n\t\t\tif (!keyMap.current) return;\n\n\t\t\tconst isKeyDown = e.type === 'keydown';\n\t\t\tif (e.code === CODE_SPACE) e.preventDefault();\n\t\t\tregisterKeys(e, isKeyDown);\n\t\t\tif (isKeyDown) onKeyDown?.(e.code as KeyboardEventCode);\n\t\t\telse onKeyUp?.(e.code as KeyboardEventCode);\n\t\t};\n\n\t\twindow.addEventListener('keyup', handleKeyEvent);\n\t\twindow.addEventListener('keydown', handleKeyEvent);\n\n\t\treturn () => {\n\t\t\twindow.removeEventListener('keyup', handleKeyEvent);\n\t\t\twindow.removeEventListener('keydown', handleKeyEvent);\n\t\t};\n\t}, [onKeyDown, onKeyUp]);\n\n\treturn keyMap;\n};\n\nconst useTimeOutRef = () => {\n\tconst timeOutRef = useRef<Record<PlayerId, number>>({\n\t\tP1: new Date().getTime(),\n\t\tP2: new Date().getTime(),\n\t\tP3: new Date().getTime(),\n\t\tP4: new Date().getTime(),\n\t});\n\n\treturn timeOutRef;\n};\n\nconst usePlayerActionSpeed = (\n\tplayers: Players,\n\tplayerId: PlayerId,\n\tpowerUpConfig: GameConfig['powerUps']\n) => {\n\tconst movementSpeed = useMemo(() => {\n\t\tconst playerState = players[playerId]?.state;\n\t\t// if there is no NPC, lets not call this often\n\t\tif (!playerState) return Number.MAX_SAFE_INTEGER;\n\t\treturn getPoweredUpValue(\n\t\t\tplayerState,\n\t\t\tPowerUp.MovementSpeed,\n\t\t\tpowerUpConfig\n\t\t);\n\t}, [playerId, players, powerUpConfig]);\n\n\treturn movementSpeed;\n};\n\nconst canPlayerTakeAction = (\n\tplayers: Players,\n\tplayerId: PlayerId,\n\tpowerUpConfig: GameConfig['powerUps']\n) => {\n\tconst player = players[playerId];\n\t// player doesn't exist\n\tif (!player) return false;\n\t// player is dead\n\tif (isPlayerDead(player.state, powerUpConfig)) return false;\n\n\treturn true;\n};\n\nconst usePlayerInterval = (\n\tplayers: Players,\n\tplayerId: PlayerId,\n\tpowerUpConfig: GameConfig['powerUps'],\n\tcb: HandleActionsFn\n) => {\n\tconst playerActionSpeed = usePlayerActionSpeed(\n\t\tplayers,\n\t\tplayerId,\n\t\tpowerUpConfig\n\t);\n\n\tuseInterval(() => {\n\t\tif (!canPlayerTakeAction(players, playerId, powerUpConfig)) return;\n\t\tcb(playerId);\n\t}, playerActionSpeed);\n};\n\nconst handleBombForPlayers = (\n\tplayers: Players,\n\tdropBomb: OnDropBomb,\n\tpowerUpConfig: GameConfig['powerUps']\n) => (keyEventCode: KeyboardEventCode) => {\n\t(Object.keys(players) as Array<PlayerId>).forEach(playerId => {\n\t\tif (canPlayerTakeAction(players, playerId, powerUpConfig)) {\n\t\t\tconst { keyboardConfig } = players[playerId]!;\n\t\t\tif (keyboardConfig) {\n\t\t\t\tconst { DropBomb } = keyboardConfig;\n\t\t\t\tif (keyEventCode === DropBomb) {\n\t\t\t\t\tdropBomb(playerId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n};\n\nconst IntervalWrapper = ({\n\tplayerId,\n\tplayers,\n\tpowerUpConfig,\n\tcb,\n}: {\n\tplayerId: PlayerId;\n\tplayers: Players;\n\tpowerUpConfig: GameConfig['powerUps'];\n\tcb: HandleActionsFn;\n}) => {\n\tusePlayerInterval(players, playerId, powerUpConfig, cb);\n\treturn null;\n};\n\nconst usePlayerEvents = ({ state, provider }: GameApi) => {\n\tconst { dropBomb, triggerMove } = provider;\n\tconst {\n\t\tgameMap,\n\t\tbombs,\n\t\tplayers,\n\t\tis3D,\n\t\tconfig: {\n\t\t\tpowerUps: powerUpConfig,\n\t\t\tsizes,\n\t\t\tduration: { bomb: bombDuration },\n\t\t},\n\t} = state;\n\n\tconst { playerRefs } = usePlayerRefs();\n\n\tconst keyMap = useKeyboardEvent({\n\t\tonKeyDown: handleBombForPlayers(players, dropBomb, powerUpConfig),\n\t});\n\tconst timeOutRef = useTimeOutRef();\n\tconst { handleActions } = useEvents({\n\t\ttriggerMove,\n\t\tplayers,\n\t\ttimeOutRef,\n\t\tkeyMap,\n\t\tis3D,\n\t\tpowerUpConfig,\n\t});\n\n\t// URGENT: Since this triggers a move event, if the\n\t// player is on the same explosion fire, he dies\n\t// multiple times\n\t// TODO: In the next update, start these intervals\n\t// when the keys are pressed and not continuously\n\treturn Object.keys(players).map(playerId => {\n\t\treturn (\n\t\t\t<IntervalWrapper\n\t\t\t\tkey={playerId}\n\t\t\t\tplayerId={playerId as PlayerId}\n\t\t\t\tplayers={players}\n\t\t\t\tpowerUpConfig={powerUpConfig}\n\t\t\t\tcb={\n\t\t\t\t\tplayerId === 'P4'\n\t\t\t\t\t\t? () => {\n\t\t\t\t\t\t\t\tnpcAction({\n\t\t\t\t\t\t\t\t\tplayerId,\n\t\t\t\t\t\t\t\t\tdropBomb,\n\t\t\t\t\t\t\t\t\tgameMap,\n\t\t\t\t\t\t\t\t\tbombs,\n\t\t\t\t\t\t\t\t\tplayers,\n\t\t\t\t\t\t\t\t\ttriggerMove,\n\t\t\t\t\t\t\t\t\tref: playerRefs.current\n\t\t\t\t\t\t\t\t\t\t.P4 as NonNullablePlayerRef,\n\t\t\t\t\t\t\t\t\tpowerUpConfig,\n\t\t\t\t\t\t\t\t\tsizes,\n\t\t\t\t\t\t\t\t\tbombDuration,\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t: handleActions\n\t\t\t\t}\n\t\t\t/>\n\t\t);\n\t});\n};\n\nexport default usePlayerEvents;\n","import styled from 'styled-components';\nimport { PickedGameState } from './types';\n\nconst SettingsAndMap = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\tflex-wrap: wrap;\n\n\t& > :first-child {\n\t\tmargin-right: 50px;\n\t\twidth: 15%;\n\t\t@media only screen and (max-width: 600px) {\n\t\t\twidth: 100%;\n\t\t\tmargin: 50px auto;\n\t\t\torder: 2;\n\t\t\t& button {\n\t\t\t\twidth: 80% !important;\n\t\t\t}\n\t\t}\n\t}\n`;\n\nconst CenteredDiv = styled.div<{ $is3D: boolean }>`\n\ttext-align: center;\n\t${({ $is3D }) => ($is3D && 'perspective: 1000') || ''}\n`;\n\ninterface Props extends PickedGameState<'is3D'> {}\n\nconst GameContainer: React.FC<Props> = ({ children, is3D }) => {\n\treturn (\n\t\t<CenteredDiv $is3D={is3D}>\n\t\t\t<h1>Bomba-man - Work In Progress</h1>\n\t\t\t<SettingsAndMap>{children}</SettingsAndMap>\n\t\t</CenteredDiv>\n\t);\n};\n\nexport type { Props as GameContainerProps };\nexport default GameContainer;\n","import { GameConfig } from 'store/redux/reducers/game/types';\nimport { createGlobalStyle } from 'styled-components';\n\nconst theme = {\n\tpalette: {\n\t\tbackground: {\n\t\t\tprimary: 'var(--primary-background)',\n\t\t\tsecondary: 'var(--secondary-background)',\n\t\t},\n\t\tcolor: {\n\t\t\tprimary: 'var(--primary-color)',\n\t\t\tsecondary: 'var(--secondary-color)',\n\t\t\terror: 'var(--error-color)',\n\t\t\twarning: 'var(--warning-color)',\n\t\t\tsuccess: 'var(--success-color)',\n\t\t\tinfo: 'var(--info-color)',\n\t\t\tdefault: 'var(--default-color)',\n\t\t},\n\t},\n\tshape: {\n\t\tborderRadius: 'var(--border-radius)',\n\t\tpadding: 'var(--padding)',\n\t},\n\tgame: {\n\t\tcharacter: {\n\t\t\tsize: 'var(--character-size)',\n\t\t},\n\t\ttile: {\n\t\t\tsize: 'var(--tile-size)',\n\t\t},\n\t},\n};\n\nconst GlobalStyles = createGlobalStyle<{ $gameConfig: GameConfig }>`\n\t:root {\n\t\t/* #region COLORS */\n\t\t--primary-background: #13141b;\n\t\t--secondary-background: #1a1d28;\n\n\t\t--primary-color: #ec7ebd;\n\t\t--secondary-color: #763ee6;\n\n\t\t/* --error-color: rgb(255, 122, 105);\n\t\t--warning-color: rgb(241, 168, 23);\n\t\t--success-color: rgb(49, 162, 76);\n\t\t--info-color: rgb(134, 218, 255);\n\t\t--default-color: rgb(228, 230, 235); */\n\t\t--error-color: #f44336;\n\t\t--warning-color: #ff9800;\n\t\t--success-color: #4caf50;\n\t\t--info-color: #2196f3;\n\t\t--default-color: #E4E6EB;\n\t\t/* #endregion */\n\n\t\t/* #region UTILITIES */\n\t\t--border-radius: 4px;\n\t\t--padding: 10px;\n\t\t/* #endregion */\n\n\t\t/* #region GAME */\n\t\t${({ $gameConfig }) => `\n\t\t\t--character-size: ${$gameConfig.sizes.character}px;\n\t\t\t--tile-size: ${$gameConfig.sizes.tile}px;\n\t\t\t--game-size: ${$gameConfig.sizes.map}px;\n\t\t\t--exploding-duration: ${$gameConfig.duration.bomb.exploding}s;\n\t\t\t--firing-duration: ${$gameConfig.duration.bomb.firing}s;\n\t\t`}\n\t\t/* #endregion */\n\t\t\n\t\t/* #region ANIMATIONS */\n\t\t/* @see https://easings.net/#easeInOutBack */\n\t\t--ease-in-out-back: cubic-bezier(0.68, -0.6, 0.32, 1.6);\n\t\t--ease-in-out-quint: cubic-bezier(0.83, 0, 0.17, 1);\n\t\t--incremental-animation-delay: 0.03s;\n\t\t--block-animation-duration: 0.5s;\n\t\t/* #endregion */\n\n\t\t/* #region GENERICS */\n\t\t*, ::before, ::after {\n\t\t\tbox-sizing: border-box;\n\t\t}\n\n\t\thtml,\n\t\tbody,\n\t\t#root {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tmargin: 0;\n\t\t\tpadding: 0;\n\t\t}\n\n\t\thtml {\n\t\t\tbackground-color: ${theme.palette.background.primary};\n\t\t\t/* color: #fff; */\n\t\t}\n\n\t\t#root {\n\t\t\tposition: relative;\n\t\t}\n\n\t\tpre {\n\t\t\twhite-space: pre-wrap;\n\t\t\tword-wrap: break-word;\n\t\t}\n\t\t/* #endregion */\n\n\t\t/* #region SCROLLBARS */\n\t\t*, ::before, ::after {\n\t\t\tscroll-behavior: smooth;\n\t\t\tscrollbar-color: black transparent;\n\t\t\tscrollbar-width: thin;\n\t\t}\n\n\t\t/* width */\n\t\t::-webkit-scrollbar {\n\t\t\twidth: 5px;\n\t\t\theight: 6px;\n\t\t}\n\n\t\t/* Track */\n\t\t::-webkit-scrollbar-track {\n\t\t\tbackground: #bfbfbf;\n\t\t}\n\n\t\t/* Handle */\n\t\t::-webkit-scrollbar-thumb {\n\t\t\tbackground: black;\n\t\t\tborder-radius: 10px;\n\t\t}\n\n\t\t/* Handle on hover */\n\t\t::-webkit-scrollbar-thumb:hover {\n\t\t\tbackground: rgba(0, 0, 0, 0.7);\n\t\t}\n\t\t/* #endregion */\n\t}\n`;\n\nexport { GlobalStyles };\nexport default theme;\n","import { memo } from 'react';\nimport styled from 'styled-components';\nimport theme from 'theme';\n\ninterface Props extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n\tvariant: ColorVariants;\n\tsize: BaseSize;\n}\n\nconst Container = styled.button<StyledProps<Props, 'variant' | 'size'>>`\n\tbackground-color: ${({ $variant }) => theme.palette.color[$variant]};\n\t/* IGNORE SIZE FOR NOW */\n\tborder-radius: ${theme.shape.borderRadius};\n\tpadding: ${theme.shape.padding};\n`;\n\nconst Button = ({ variant, size, children, ...rest }: Props) => {\n\treturn (\n\t\t<Container $variant={variant} $size={size} {...rest}>\n\t\t\t{children}\n\t\t</Container>\n\t);\n};\n\nexport default memo(Button);\n","const sleep = (duration = 1000) => {\n\treturn new Promise(r => {\n\t\tsetTimeout(r, duration);\n\t});\n};\n\n/**\n * Wraps the button on click with a blur event to undo auto on focus. This is\n * especially annoying when view is changed and the user hits the \"Space\"\n * button and it switches the view back as it's \"focus\"ed on.\n *\n * @param cb Curried function where callback is wrapped with this utility.\n * @returns Base event cb\n */\nconst wrapPreventFocusLock = (\n\tcb: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n) => (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n\t// undo onFocus lock\n\te.currentTarget.blur();\n\tcb(e);\n};\n\nconst doesNotExist = (value: any) => value === null || value === undefined;\n\nexport { sleep, wrapPreventFocusLock, doesNotExist };\n","import Button from 'components/Button';\nimport { GamePayload } from 'store/redux/reducers/game/types';\nimport { wrapPreventFocusLock } from 'utils';\n\ninterface Props extends Partial<React.ComponentProps<typeof Button>> {\n\tactive?: boolean;\n\tonClick: ReactOnClick<GamePayload>;\n}\n\nconst GameButton = ({ active = false, onClick, children, ...rest }: Props) => {\n\treturn (\n\t\t<Button\n\t\t\tstyle={{ width: '100%', wordWrap: 'break-word', marginBottom: 10 }}\n\t\t\tvariant={active ? 'success' : 'warning'}\n\t\t\tsize=\"medium\"\n\t\t\tonClick={wrapPreventFocusLock(onClick)}\n\t\t\t{...rest}\n\t\t>\n\t\t\t{children}\n\t\t</Button>\n\t);\n};\n\nexport default GameButton;\n","import { memo, useMemo } from 'react';\nimport GameButton from './GameButton';\nimport { GameApi } from './types';\n\ninterface Props extends GameApi {}\n\nconst GameSettings = ({ state, provider }: Props) => {\n\tconst {\n\t\tgenerateNewCollisionCoordinates,\n\t\ttogglePerspective,\n\t\ttoggleDimension,\n\t\ttoggleTwoPlayer,\n\t\ttoggleNPC,\n\t} = provider;\n\n\tconst {\n\t\tis3D,\n\t\tisSideView,\n\t\tplayers: { P2, P4: NPC },\n\t} = state;\n\n\tconst player2IsOn = !!P2;\n\tconst npcIsOn = !!NPC;\n\n\tconst buttons = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tlabel: 'New Collision Coordinates',\n\t\t\t\t\tonClick: generateNewCollisionCoordinates,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Toggle 3D (Experimental)',\n\t\t\t\t\tonClick: toggleDimension,\n\t\t\t\t\tactive: is3D,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Toggle Side View',\n\t\t\t\t\tonClick: togglePerspective,\n\t\t\t\t\tactive: isSideView,\n\t\t\t\t\tdisabled: !is3D,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Toggle Two-Player Mode',\n\t\t\t\t\tonClick: toggleTwoPlayer,\n\t\t\t\t\tactive: player2IsOn,\n\t\t\t\t},\n\t\t\t\t{ label: 'Toggle NPC', onClick: toggleNPC, active: npcIsOn },\n\t\t\t].map(({ label, ...rest }) => (\n\t\t\t\t<GameButton key={label} {...rest}>\n\t\t\t\t\t{label}\n\t\t\t\t</GameButton>\n\t\t\t)),\n\t\t[\n\t\t\tgenerateNewCollisionCoordinates,\n\t\t\tis3D,\n\t\t\tisSideView,\n\t\t\tnpcIsOn,\n\t\t\tplayer2IsOn,\n\t\t\ttoggleDimension,\n\t\t\ttoggleNPC,\n\t\t\ttogglePerspective,\n\t\t\ttoggleTwoPlayer,\n\t\t]\n\t);\n\n\treturn <div>{buttons}</div>;\n};\n\nexport type { Props as GameSettingsProps };\nexport default memo(GameSettings);\n","import './Cube.scss';\nimport styled from 'styled-components';\nimport { TileProps } from '../types';\n\nconst CuboidSide = styled.div``;\n\nconst Cuboid = styled.div<StyledProps<TileProps, 'size'>>`\n\t${({ $size }) => `\n\t\t--tile-size: ${$size};\n\t`}\n\theight: calc(var(--tile-size) * 1px);\n\twidth: calc(var(--tile-size) * 1px);\n\ttransform-style: preserve-3d;\n\tposition: absolute;\n\ttransform-origin: center center;\n\ttransition: 300ms;\n\n\ttransform: scale(1, 1) translateZ(calc(var(--tile-size) / 2 * -1px));\n\n\t& > ${CuboidSide} {\n\t\tborder: 1px solid var(--primary-background);\n\n\t\theight: calc(var(--tile-size) * 1px);\n\t\twidth: calc(var(--tile-size) * 1px);\n\t\t/* transform-origin: 50% 50%; */\n\t\ttop: 50%;\n\t\tleft: 50%;\n\t\tposition: absolute;\n\n\t\t/** @see https://codepen.io/jh3y/pen/BaKqQLJ */\n\t\t&:nth-of-type(1) {\n\t\t\ttransform: translate(-50%, -50%) rotateX(-90deg)\n\t\t\t\ttranslateZ(calc((var(--tile-size) / 2) * 1px));\n\t\t}\n\t\t&:nth-of-type(2) {\n\t\t\ttransform: translate(-50%, -50%) rotateX(-90deg) rotateY(180deg)\n\t\t\t\ttranslateZ(calc((var(--tile-size) / 2) * 1px));\n\t\t}\n\t\t&:nth-of-type(3) {\n\t\t\ttransform: translate(-50%, -50%) rotateX(-90deg) rotateY(90deg)\n\t\t\t\ttranslateZ(calc((var(--tile-size) / 2) * 1px));\n\t\t}\n\t\t&:nth-of-type(4) {\n\t\t\ttransform: translate(-50%, -50%) rotateX(-90deg) rotateY(-90deg)\n\t\t\t\ttranslateZ(calc((var(--tile-size) / 2) * 1px));\n\t\t}\n\t\t&:nth-of-type(5) {\n\t\t\tbackground-color: var(--secondary-background);\n\t\t\ttransform: translate(-50%, -50%)\n\t\t\t\ttranslateZ(calc((var(--tile-size) / 2) * 1px));\n\t\t}\n\t\t&:nth-of-type(6) {\n\t\t\ttransform: translate(-50%, -50%)\n\t\t\t\ttranslateZ(calc((var(--tile-size) / 2) * -1px)) rotateX(180deg);\n\t\t}\n\t}\n\n\t&.bouncy-block- {\n\t\t&no-animation {\n\t\t\ttransform: translateZ(calc(var(--tile-size) / 2 * 1px));\n\t\t\t& > ${CuboidSide} {\n\t\t\t\tbackground-color: var(--secondary-color);\n\t\t\t}\n\t\t}\n\n\t\t&0 {\n\t\t\ttransform: translateZ(calc(var(--tile-size) / 2 * 1px))\n\t\t\t\trotateX(0deg) rotateY(0deg) rotateZ(0deg);\n\t\t}\n\t}\n`;\n\nconst Cube = ({\n\tsize,\n\ttop,\n\tleft,\n\tanimate = false,\n\tvariant,\n\tcolor: backgroundColor,\n\tcollisionIndex,\n\tstyle,\n\tclassName,\n\t...rest\n}: TileProps) => {\n\tconst _className = `cuboid bouncy-block-${\n\t\t(!animate && 'no-animation') || collisionIndex || 0\n\t} ${variant}${(className && ` ${className}`) || ''}`;\n\n\treturn (\n\t\t<Cuboid\n\t\t\tclassName={_className}\n\t\t\tstyle={{ ...style, top, left, width: size, height: size }}\n\t\t\t$size={size}\n\t\t\t{...rest}\n\t\t>\n\t\t\t{Array(6)\n\t\t\t\t.fill(0)\n\t\t\t\t.map((_, ind) => (\n\t\t\t\t\t<CuboidSide\n\t\t\t\t\t\tkey={ind}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t...(backgroundColor && { backgroundColor }),\n\t\t\t\t\t\t\twidth: size,\n\t\t\t\t\t\t\theight: size,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t</Cuboid>\n\t);\n};\n\nexport default Cube;\n","import { ExplosionState, Explosive } from 'enums';\nimport { useEffect, useState } from 'react';\nimport {\n\tBomb as BombType,\n\tBombFn,\n\tBombId,\n\tGameConfigRanges,\n} from 'store/redux/reducers/game/types';\nimport styled, { keyframes } from 'styled-components';\nimport theme from 'theme';\nimport { sleep } from 'utils';\nimport Cube from './Cube';\n\nconst getTransform = (deg: number, is3D: boolean) => {\n\treturn `${\n\t\tis3D\n\t\t\t? `transform: translateZ(calc(var(--tile-size) / 2 * 2px)) rotateX(${deg}deg) rotateY(${deg}deg)`\n\t\t\t: `transform: rotate(${deg}deg)`\n\t};`;\n};\n\nconst incrementalSpeedRotationKeyframes = (is3D = false) => keyframes`\n\t0% { ${getTransform(0, is3D)} }\n\t\n\t/* 40% -> 100% */\n\t${Array(7)\n\t\t.fill(0)\n\t\t.map(\n\t\t\t(_, ind) =>\n\t\t\t\t/* start at 40% */\n\t\t\t\t`${(ind + 4) * 10}% { ${getTransform(\n\t\t\t\t\t/* gradually increase the rotation degree multiplier */\n\t\t\t\t\t(ind + 1) *\n\t\t\t\t\t\t((is3D && ((ind < 6 && 90) || 100)) ||\n\t\t\t\t\t\t\t(ind < 4 && 90) ||\n\t\t\t\t\t\t\t(ind < 6 && 270) ||\n\t\t\t\t\t\t\t360),\n\t\t\t\t\tis3D\n\t\t\t\t)} }`\n\t\t)\n\t\t.join('\\n')}\n`;\n\nconst FiringBomb = styled.div`\n\tanimation: ${incrementalSpeedRotationKeyframes()} linear forwards;\n`;\n\nconst FiringCubeBomb = styled(Cube)`\n\t/* ${({ size }) => `\n\t\t--tile-size: ${size};\n\t`} */\n\tanimation: ${incrementalSpeedRotationKeyframes(true)} linear forwards;\n`;\ninterface Props extends BombType {\n\t// skin: Skin;\n\tcolor: string;\n\ttileSize: GameConfigRanges.SquareSize;\n\tfiringDuration: number;\n\texplodingDuration: number;\n\ttriggerExplosion: BombFn;\n\tonExplosionComplete: BombFn;\n\tis3D: boolean;\n}\n\nconst Bomb = ({\n\tcolor: backgroundColor,\n\tfiringDuration,\n\texplodingDuration,\n\t// explosionSize,\n\ttileSize,\n\tid,\n\ttop,\n\tleft,\n\ttriggerExplosion,\n\tonExplosionComplete,\n\tis3D,\n}: Props) => {\n\tconst [explosionState, setExplosionState] = useState<ExplosionState>(\n\t\tExplosionState.Firing\n\t);\n\n\tuseEffect(() => {\n\t\tconst kaboom = async () => {\n\t\t\tawait sleep(firingDuration * 1000);\n\t\t\t// if (!isMounted.current) return;\n\t\t\ttriggerExplosion(id, async (bombIds: Set<BombId>) => {\n\t\t\t\t// update animation\n\t\t\t\tsetExplosionState(ExplosionState.Exploding);\n\t\t\t\tawait sleep(explodingDuration * 1000);\n\n\t\t\t\t// complete explosion for this bomb\n\t\t\t\tonExplosionComplete(id);\n\t\t\t\t// then complete the explosion for all the other bombs\n\t\t\t\t// that got caught in the fire complete their explosion\n\t\t\t\t// as the trigger was already handled in the reducer\n\t\t\t\tbombIds.forEach(bId => {\n\t\t\t\t\tonExplosionComplete(bId);\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\tkaboom();\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t}, []);\n\n\tconst bombSize = tileSize / 2;\n\tconst bombPadding = bombSize / 2;\n\n\tconst bombStyleProps: React.CSSProperties = {\n\t\tposition: 'absolute',\n\t\tbackgroundColor,\n\t\twidth: bombSize,\n\t\theight: bombSize,\n\t\ttop: top + bombPadding,\n\t\tleft: left + bombPadding,\n\t\tanimationDuration: `${firingDuration}s`,\n\t};\n\n\treturn (\n\t\t(explosionState === ExplosionState.Firing &&\n\t\t\t((!is3D && <FiringBomb style={bombStyleProps} />) || (\n\t\t\t\t<FiringCubeBomb\n\t\t\t\t\tsize={bombSize}\n\t\t\t\t\ttop={Number(bombStyleProps.top)}\n\t\t\t\t\tleft={Number(bombStyleProps.left)}\n\t\t\t\t\tanimate={false}\n\t\t\t\t\tvariant={Explosive.Bomb}\n\t\t\t\t\tcolor={theme.palette.color.error}\n\t\t\t\t\tcollisionIndex={1}\n\t\t\t\t\tstyle={bombStyleProps}\n\t\t\t\t/>\n\t\t\t))) ||\n\t\tnull\n\t);\n};\n\nexport default Bomb;\n","import { Direction } from 'enums';\nimport { useEffect, useRef, useState } from 'react';\nimport { getMoveDirectionFromKeyboardCode } from 'utils/game';\nimport { CharacterProps } from '../types';\nimport './SpriteCharacter.scss';\n\nconst ANIMATION_STOP_THROTTLE_DURATION = 200;\nconst SpriteCharacter = ({\n\tid,\n\tname,\n\tcoordinates: { top, left },\n\tstyle,\n\tkeyboardConfig,\n\thighlight,\n\t...rest\n}: CharacterProps) => {\n\t/** Direction being faced */\n\tconst [direction, setDirection] = useState<Direction>(Direction.DOWN);\n\t/** Direction key being held */\n\tconst [currentKeyDirection, setCurrentKeyDirection] = useState('');\n\tconst lastMovementTime = useRef(new Date().getTime());\n\n\tconst isWalking = !!currentKeyDirection;\n\n\tuseEffect(() => {\n\t\t// ignore the npc action\n\t\tconst getDirection = (e: KeyboardEvent) => {\n\t\t\treturn keyboardConfig\n\t\t\t\t? getMoveDirectionFromKeyboardCode(e.code, keyboardConfig)\n\t\t\t\t: null;\n\t\t};\n\n\t\tconst updateDirection = (newDirection: Direction) => {\n\t\t\tsetDirection(newDirection);\n\t\t};\n\n\t\tconst clearCurrentKey = () => {\n\t\t\tif (currentKeyDirection) setCurrentKeyDirection('');\n\t\t};\n\n\t\tconst handleKeyDown = (e: KeyboardEvent) => {\n\t\t\tconst newDirection = getDirection(e);\n\t\t\tif (!newDirection) {\n\t\t\t\tclearCurrentKey();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlastMovementTime.current = new Date().getTime();\n\t\t\tsetCurrentKeyDirection(newDirection);\n\t\t\tupdateDirection(newDirection);\n\t\t};\n\n\t\tconst handleKeyUp = () => {\n\t\t\t// keypress-move: keydown + keyup, i.e. D, D, D (not hold D)\n\t\t\t// Only stop the moving animation after the player goes idle\n\t\t\t// for some duration. This allows us to use keypress to move\n\t\t\t// and still have a move animation (instead of keydown).\n\t\t\t// This is needed because otherwise keypress-move wont trigger\n\t\t\t// animations.\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst delayedCurrentTime =\n\t\t\t\t\tnew Date().getTime() - ANIMATION_STOP_THROTTLE_DURATION;\n\t\t\t\tif (lastMovementTime.current >= delayedCurrentTime) return;\n\t\t\t\tclearCurrentKey();\n\t\t\t}, ANIMATION_STOP_THROTTLE_DURATION);\n\t\t};\n\n\t\tdocument.addEventListener('keydown', handleKeyDown);\n\t\tdocument.addEventListener('keyup', handleKeyUp);\n\t\treturn () => {\n\t\t\tdocument.removeEventListener('keydown', handleKeyDown);\n\t\t\tdocument.removeEventListener('keyup', handleKeyUp);\n\t\t};\n\t}, [currentKeyDirection, keyboardConfig]);\n\n\treturn (\n\t\t<div\n\t\t\tid={id}\n\t\t\tclassName=\"character\"\n\t\t\tdata-facing={direction}\n\t\t\tdata-walking={isWalking.toString()}\n\t\t\tdata-highlight={highlight}\n\t\t\tstyle={{ ...style, top, left, position: 'absolute', zIndex: 9999 }}\n\t\t\t{...rest}\n\t\t>\n\t\t\t{/* <div className=\"name\">{name}</div> */}\n\t\t\t<div className=\"shadow pixel-art\" />\n\t\t\t<div className=\"spritesheet-wrapper\">\n\t\t\t\t<div className=\"spritesheet pixel-art\" />\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default SpriteCharacter;\n","import Cube from 'containers/Game/components/Cube';\nimport { Player } from 'enums';\nimport { GameConfigRanges } from 'store/redux/reducers/game/types';\nimport theme from 'theme';\nimport { CUBE_BASE_TRANSFORM } from 'utils/game';\nimport {\n\tCharacterProps,\n\tPlayerId,\n\tPlayerKeyboardConfig,\n\tTopLeftCoordinates,\n} from '../types';\n// import CircleCharacter from './CircleCharacter';\nimport SpriteCharacter from './SpriteCharacter';\n\ninterface Props {\n\tid: PlayerId;\n\tname: string;\n\t// skin: Skin;\n\tsize: GameConfigRanges.SquareSize;\n\ttileSize: GameConfigRanges.SquareSize;\n\tcoordinates: TopLeftCoordinates;\n\tkeyboardConfig?: PlayerKeyboardConfig;\n\tis3D: boolean;\n\thighlight?: boolean;\n}\n\nconst Character = ({\n\t/* skin */\n\tid,\n\tname,\n\tsize,\n\ttileSize,\n\tcoordinates: { top, left },\n\tkeyboardConfig,\n\tis3D,\n\thighlight = false,\n\t...rest\n}: Props) => {\n\tconst padding = (tileSize - size) / 2;\n\n\tconst _top = padding + top;\n\tconst _left = padding + left;\n\n\tconst props: CharacterProps = {\n\t\tid,\n\t\tname: `${name} ${id}`,\n\t\tcoordinates: {\n\t\t\ttop: _top,\n\t\t\tleft: _left,\n\t\t},\n\t\tkeyboardConfig,\n\t\thighlight,\n\t\t...rest,\n\t};\n\n\treturn (\n\t\t(is3D && (\n\t\t\t<Cube\n\t\t\t\tid={id}\n\t\t\t\tsize={size}\n\t\t\t\ttop={_top}\n\t\t\t\tleft={_left}\n\t\t\t\tanimate\n\t\t\t\tcolor={theme.palette.color.success}\n\t\t\t\tstyle={{\n\t\t\t\t\ttransform: CUBE_BASE_TRANSFORM,\n\t\t\t\t\t// top,\n\t\t\t\t\t// left,\n\t\t\t\t}}\n\t\t\t\tvariant={Player[id]}\n\t\t\t\t{...rest}\n\t\t\t/>\n\t\t)) || <SpriteCharacter {...props} />\n\t);\n};\n\nexport type { Props };\nexport default Character;\n","import { keyframes } from 'styled-components';\n\n/** @see https://codepen.io/nelledejones/pen/gOOPWrK#L68 */\nconst bounceAnimation = (withOpacity = false) => keyframes`\n\t0% { transform: scale(0, 0); }\n\t25% { transform: scale(0.9, 1.1); }\n\t50% { transform: scale(1.1, 0.9); }\n\t75% { transform: scale(0.95, 1.05); }\n\t100% { transform: scale(1, 1); ${(withOpacity && 'opacity: 1;') || ''} }\n`;\n\nexport { bounceAnimation };\n","import { bounceAnimation } from 'animations';\nimport styled, { css } from 'styled-components';\n\nconst TileIcon = styled.div<{\n\t$size: number;\n\t$top: number;\n\t$left: number;\n\t$animationDelay?: string;\n}>`\n\tposition: absolute;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\topacity: 0;\n\tsvg {\n\t\theight: 100% !important;\n\t\twidth: 100% !important;\n\t\tmax-width: 70%;\n\t\tmax-height: 80%;\n\t}\n\t${({ $size, $animationDelay, $top, $left }) => css`\n\t\ttop: ${$top}px;\n\t\tleft: ${$left}px;\n\t\twidth: ${$size}px;\n\t\theight: ${$size}px;\n\t\tanimation: ${bounceAnimation(true)} var(--block-animation-duration)\n\t\t\t${$animationDelay || ''} ease-out forwards;\n\t`}\n`;\n\nexport default TileIcon;\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBookDead } from '@fortawesome/free-solid-svg-icons';\nimport {\n\tFontAwesomeIconProps,\n\tTopLeftCoordinates,\n} from 'containers/Game/types';\nimport theme from 'theme';\nimport { GameConfigRanges } from 'store/redux/reducers/game/types';\nimport TileIcon from './TileIcon';\n\nconst DeadIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faBookDead} {...props} />\n);\n\ninterface Props {\n\tsize: GameConfigRanges.SquareSize;\n\texplodingDuration: GameConfigRanges.ExplodingDuration;\n\tcoordinates: TopLeftCoordinates;\n}\n\nconst DeadCharacter = ({\n\tsize,\n\texplodingDuration,\n\tcoordinates: { top, left },\n}: Props) => {\n\treturn (\n\t\t<TileIcon\n\t\t\t$top={top}\n\t\t\t$left={left}\n\t\t\t$size={size}\n\t\t\t$animationDelay={`${explodingDuration}s`}\n\t\t>\n\t\t\t<DeadIcon color={theme.palette.color.default} />\n\t\t</TileIcon>\n\t);\n};\n\nexport default DeadCharacter;\n","import theme from 'theme';\nimport { PowerUp } from 'enums';\nimport {\n\tgetPoweredUpValue,\n\tisPlayerDead,\n\tisPlayerSteppingOnFire,\n} from 'utils/game';\nimport Bomb from './components/Bomb';\nimport Character from './components/Character';\nimport { GameApi, PlayerConfig, PlayerId } from './types';\nimport DeadCharacter from './components/DeadCharacter';\n\ntype PlayerEntry = Array<[PlayerId, PlayerConfig]>;\n\ninterface Props extends GameApi {}\n\nconst GameContent = ({ state, provider }: Props) => {\n\tconst { triggerExplosion, onExplosionComplete } = provider;\n\tconst { gameMap, players, bombs, is3D, config } = state;\n\n\treturn (\n\t\t<>\n\t\t\t{(Object.entries(players) as PlayerEntry).map(\n\t\t\t\t([playerId, playerConfig]) => {\n\t\t\t\t\t// TODO: Put this in the store\n\t\t\t\t\tconst {\n\t\t\t\t\t\t[playerId]: keyboardConfig,\n\t\t\t\t\t} = config.keyboardConfig;\n\t\t\t\t\tconst { coordinates, state: playerState } = playerConfig;\n\n\t\t\t\t\tconst isAlive = !isPlayerDead(playerState, config.powerUps);\n\t\t\t\t\tconst isSteppingOnFire = isPlayerSteppingOnFire(\n\t\t\t\t\t\tgameMap,\n\t\t\t\t\t\tcoordinates,\n\t\t\t\t\t\tconfig.sizes.movement\n\t\t\t\t\t);\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t(isAlive && (\n\t\t\t\t\t\t\t<Character\n\t\t\t\t\t\t\t\tid={playerId}\n\t\t\t\t\t\t\t\tkey={playerId}\n\t\t\t\t\t\t\t\tname=\"Bomber\"\n\t\t\t\t\t\t\t\tsize={config.sizes.character}\n\t\t\t\t\t\t\t\ttileSize={config.sizes.tile}\n\t\t\t\t\t\t\t\tcoordinates={coordinates!}\n\t\t\t\t\t\t\t\tkeyboardConfig={keyboardConfig}\n\t\t\t\t\t\t\t\tis3D={is3D}\n\t\t\t\t\t\t\t\thighlight={isSteppingOnFire}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)) || (\n\t\t\t\t\t\t\t<DeadCharacter\n\t\t\t\t\t\t\t\tkey={playerId}\n\t\t\t\t\t\t\t\tcoordinates={coordinates!}\n\t\t\t\t\t\t\t\tsize={config.sizes.character}\n\t\t\t\t\t\t\t\texplodingDuration={\n\t\t\t\t\t\t\t\t\tconfig.duration.bomb.exploding\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t)}\n\t\t\t{Object.values(bombs).map(({ id, playerId, ...bombProps }) => {\n\t\t\t\tconst playerState = players[playerId]!.state;\n\t\t\t\tconst explosionSize = getPoweredUpValue(\n\t\t\t\t\tplayerState,\n\t\t\t\t\tPowerUp.BombSize,\n\t\t\t\t\tconfig.powerUps\n\t\t\t\t);\n\n\t\t\t\treturn (\n\t\t\t\t\t<Bomb\n\t\t\t\t\t\tkey={id}\n\t\t\t\t\t\tid={id}\n\t\t\t\t\t\tplayerId={playerId}\n\t\t\t\t\t\t{...bombProps}\n\t\t\t\t\t\tcolor={theme.palette.color.error}\n\t\t\t\t\t\ttileSize={config.sizes.tile}\n\t\t\t\t\t\texplosionSize={explosionSize}\n\t\t\t\t\t\tfiringDuration={config.duration.bomb.firing}\n\t\t\t\t\t\texplodingDuration={config.duration.bomb.exploding}\n\t\t\t\t\t\ttriggerExplosion={triggerExplosion}\n\t\t\t\t\t\tonExplosionComplete={onExplosionComplete}\n\t\t\t\t\t\tis3D={is3D}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</>\n\t);\n};\n\nexport type { Props as GameContentProps };\nexport default GameContent;\n","import { bounceAnimation } from 'animations';\nimport { Explosive } from 'enums';\nimport { memo } from 'react';\nimport styled, { css, keyframes } from 'styled-components';\nimport theme from 'theme';\nimport { Fire, TileProps } from '../types';\n\ntype WrapperProps = StyledProps<\n\tTileProps,\n\t| 'size'\n\t| 'top'\n\t| 'left'\n\t| 'animate'\n\t| 'color'\n\t| 'collisionIndex'\n\t| 'fireSquare'\n>;\n\nconst fireAnimation = (fireSquare: Fire) => {\n\tlet x = 0;\n\tlet y = 0;\n\tlet rotateFrom = '';\n\tlet rotateTo = '';\n\tlet borderRadiusFrom = '';\n\tlet borderRadiusTo = '';\n\n\tif (fireSquare === Explosive.FireHorizontal) {\n\t\tx = 1;\n\t} else if (fireSquare === Explosive.FireVertical) {\n\t\ty = 1;\n\t} else {\n\t\tx = 0.5;\n\t\ty = 0.5;\n\t\trotateFrom = ' rotate(90deg)';\n\t\trotateTo = ' rotate(360deg)';\n\t\tborderRadiusFrom = 'border-radius: 50%;';\n\t\tborderRadiusTo = 'border-radius: 0%;';\n\t}\n\n\treturn keyframes`\n\t\t// cool effect\n\t\t/* 0% { border: 16px solid ${theme.palette.background.primary}; transform: scale(${x}, ${y})${rotateFrom}; ${borderRadiusFrom} } */\n\t\t0% { background-color: ${theme.palette.background.primary}; transform: scale(${x}, ${y})${rotateFrom}; ${borderRadiusFrom} }\n\t\t20% { background-color: ${theme.palette.color.error}; }\n\t\t40% { background-color: ${theme.palette.color.info}; }\n\t\t50% { ${borderRadiusTo} }\n\t\t60% { background-color: ${theme.palette.color.error}; }\n\t\t80% { background-color: ${theme.palette.color.info}; }\n\t\t100% { background-color: ${theme.palette.color.error}; transform: scale(1)${rotateTo};  }\n\t`;\n};\n\nconst Wrapper = styled.div.attrs<WrapperProps>(\n\t({ $size, $top, $left, $color }) => ({\n\t\tstyle: {\n\t\t\twidth: $size,\n\t\t\theight: $size,\n\t\t\ttop: $top,\n\t\t\tleft: $left,\n\t\t\t...($color && { backgroundColor: $color }),\n\t\t},\n\t})\n)<WrapperProps>`\n\tposition: absolute;\n\t/* background-color: ${theme.palette.background.secondary}; */\n\tborder: 1px solid ${theme.palette.background.primary};\n\t${({ $color, $collisionIndex, $animate, $fireSquare }) => {\n\t\treturn (\n\t\t\t($fireSquare &&\n\t\t\t\tcss`\n\t\t\t\t\tborder: none;\n\t\t\t\t\tanimation: ${fireAnimation($fireSquare)}\n\t\t\t\t\t\tcalc(var(--firing-duration) / 2)\n\t\t\t\t\t\tvar(--ease-in-out-quint) forwards;\n\t\t\t\t`) ||\n\t\t\t($animate &&\n\t\t\t\t$color &&\n\t\t\t\tcss`\n\t\t\t\t\ttransform: scale(0, 0);\n\t\t\t\t\tz-index: 9999;\n\t\t\t\t\tanimation: ${bounceAnimation()}\n\t\t\t\t\t\tvar(--block-animation-duration) ease\n\t\t\t\t\t\tcalc(\n\t\t\t\t\t\t\t${$collisionIndex as number} *\n\t\t\t\t\t\t\t\tvar(--incremental-animation-delay)\n\t\t\t\t\t\t)\n\t\t\t\t\t\tforwards;\n\t\t\t\t`) ||\n\t\t\t''\n\t\t);\n\t}}\n`;\n\nconst Tile = ({\n\tsize,\n\ttop,\n\tleft,\n\tcolor,\n\tcollisionIndex,\n\tanimate = false,\n\tfireSquare,\n}: TileProps) => {\n\treturn (\n\t\t<Wrapper\n\t\t\t$size={size}\n\t\t\t$top={top}\n\t\t\t$left={left}\n\t\t\t$animate={animate}\n\t\t\t$color={color}\n\t\t\t$collisionIndex={collisionIndex}\n\t\t\t$fireSquare={fireSquare}\n\t\t/>\n\t);\n};\n\nexport default memo(Tile);\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {\n\tfaShoePrints,\n\tfaHeart,\n\tfaBomb,\n\tfaPrescriptionBottleAlt,\n} from '@fortawesome/free-solid-svg-icons';\nimport { PowerUp } from 'enums';\nimport theme from 'theme';\nimport { FontAwesomeIconProps } from 'containers/Game/types';\n\nconst ShoePrintsIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faShoePrints} {...props} />\n);\nconst HeartIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faHeart} {...props} />\n);\nconst BombIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faBomb} {...props} />\n);\nconst PrescriptionBottleAltIcon = (props: FontAwesomeIconProps) => (\n\t<FontAwesomeIcon icon={faPrescriptionBottleAlt} {...props} />\n);\n\nconst icons: Record<\n\tPowerUp,\n\t{ icon: (props: FontAwesomeIconProps) => JSX.Element; color: string }\n> = {\n\t[PowerUp.Life]: {\n\t\tcolor: theme.palette.color.success,\n\t\ticon: HeartIcon,\n\t},\n\t[PowerUp.BombCount]: {\n\t\tcolor: theme.palette.color.error,\n\t\ticon: BombIcon,\n\t},\n\t[PowerUp.BombSize]: {\n\t\tcolor: theme.palette.color.warning,\n\t\ticon: PrescriptionBottleAltIcon,\n\t},\n\t[PowerUp.MovementSpeed]: {\n\t\tcolor: theme.palette.color.info,\n\t\ticon: ShoePrintsIcon,\n\t},\n};\n\nexport default icons;\n","import { PowerUp as PowerUpEnum } from 'enums';\nimport TileIcon from '../TileIcon';\nimport icons from './icons';\n\ninterface Props {\n\tvariant: PowerUpEnum;\n\tsize: number;\n\ttop: number;\n\tleft: number;\n}\n\nconst PowerUp = ({ variant, top, left, size }: Props) => {\n\tconst { icon: Icon, color } = icons[variant];\n\treturn (\n\t\t<TileIcon $top={top} $left={left} $size={size}>\n\t\t\t<Icon color={color} />\n\t\t</TileIcon>\n\t);\n};\n\nexport default PowerUp;\n","import usePrevious from 'hooks/usePrevious';\nimport styled from 'styled-components';\nimport theme from 'theme';\nimport { Explosive, Tile as TileEnum } from 'enums';\nimport { isPowerUp } from 'utils/game';\nimport { useEffect } from 'react';\nimport { GameConfigRanges } from 'store/redux/reducers/game/types';\nimport Cube from './Cube';\nimport Tile from './Tile';\nimport { GameMap, Square, TileProps } from '../types';\nimport PowerUp from './PowerUp';\n\ninterface Props {\n\tsize: RangeOf<15, 6>;\n\tgameMap: GameMap;\n\tis3D: boolean;\n\tisTopView: boolean;\n\tanimationCounter: number;\n\ttileSize: GameConfigRanges.SquareSize;\n}\n\nconst Wrapper = styled.div<StyledProps<Props, 'size' | 'is3D' | 'isTopView'>>`\n\twidth: ${({ $size }) => `calc(${theme.game.tile.size} * ${$size})`};\n\theight: ${({ $size }) => `calc(${theme.game.tile.size} * ${$size})`};\n\tborder-radius: ${theme.shape.borderRadius};\n\tbackground-color: ${theme.palette.background.secondary};\n\tposition: relative;\n\tbox-shadow: 0 10px 20px rgba(0, 0, 0, 0.5), 0 6px 6px rgba(0, 0, 0, 0.6);\n\ttransition: transform var(--block-animation-duration);\n\n\t${({ $is3D, $isTopView }) => {\n\t\tlet style = '';\n\t\tif ($is3D) {\n\t\t\tstyle += 'transform-style: preserve-3d;';\n\t\t\tif (!$isTopView) {\n\t\t\t\tstyle += `\\ntransform: rotateX(-24deg) rotateY(-24deg) rotateX(90deg);`;\n\t\t\t}\n\t\t}\n\t\treturn style;\n\t}}\n`;\n\nconst Map: React.FC<Props> = ({\n\tsize,\n\tgameMap,\n\tis3D,\n\tisTopView,\n\tanimationCounter,\n\tchildren,\n\ttileSize,\n}) => {\n\t// we only need to animate when new collision is set using the button\n\t// need to prevent explosion diff from re-animating tiles\n\tconst previousAnimationCounter = usePrevious(animationCounter);\n\tlet shouldAnimate = animationCounter !== previousAnimationCounter;\n\n\tuseEffect(() => {\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\tshouldAnimate = true;\n\t}, []);\n\n\tlet collisionIndex = 1;\n\treturn (\n\t\t<Wrapper $size={size} $is3D={is3D} $isTopView={isTopView}>\n\t\t\t{Object.keys(gameMap).map((outer, outerInd) => {\n\t\t\t\treturn Object.values(gameMap[outer]).map(\n\t\t\t\t\t(square: Square, innerInd) => {\n\t\t\t\t\t\tconst hasCollision =\n\t\t\t\t\t\t\tsquare === TileEnum.NonBreaking ||\n\t\t\t\t\t\t\tsquare === TileEnum.Breaking;\n\n\t\t\t\t\t\tconst key = `${outerInd}_${innerInd}`;\n\t\t\t\t\t\tconst squareSize = tileSize;\n\t\t\t\t\t\tconst top = outerInd * tileSize;\n\t\t\t\t\t\tconst left = innerInd * tileSize;\n\n\t\t\t\t\t\t// if it's a PowerUp\n\t\t\t\t\t\tif (isPowerUp(square)) {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<PowerUp\n\t\t\t\t\t\t\t\t\tkey={key}\n\t\t\t\t\t\t\t\t\tsize={squareSize}\n\t\t\t\t\t\t\t\t\tvariant={square as ValuesOf<typeof PowerUp>}\n\t\t\t\t\t\t\t\t\ttop={top}\n\t\t\t\t\t\t\t\t\tleft={left}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet fireSquare;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tsquare === Explosive.FireCore ||\n\t\t\t\t\t\t\tsquare === Explosive.FireHorizontal ||\n\t\t\t\t\t\t\tsquare === Explosive.FireVertical\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tfireSquare = square;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// TODO: Get this key properly\n\t\t\t\t\t\tconst props: TileProps & { key: string } = {\n\t\t\t\t\t\t\tkey,\n\t\t\t\t\t\t\tsize: squareSize,\n\t\t\t\t\t\t\ttop,\n\t\t\t\t\t\t\tleft,\n\t\t\t\t\t\t\tanimate: shouldAnimate,\n\t\t\t\t\t\t\tvariant: square,\n\t\t\t\t\t\t\tfireSquare,\n\t\t\t\t\t\t\t...(hasCollision && {\n\t\t\t\t\t\t\t\tcolor:\n\t\t\t\t\t\t\t\t\ttheme.palette.color[\n\t\t\t\t\t\t\t\t\t\tsquare === TileEnum.NonBreaking\n\t\t\t\t\t\t\t\t\t\t\t? 'secondary'\n\t\t\t\t\t\t\t\t\t\t\t: 'primary'\n\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\tcollisionIndex: collisionIndex++,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t(is3D &&\n\t\t\t\t\t\t\t\t((hasCollision && <Cube {...props} />) || (\n\t\t\t\t\t\t\t\t\t<Tile {...props} />\n\t\t\t\t\t\t\t\t))) || <Tile {...props} />\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t})}\n\t\t\t{children}\n\t\t</Wrapper>\n\t);\n};\n\nexport default Map;\n","import { GameConfig } from 'store/redux/reducers/game/types';\nimport Map from './components/Map';\nimport { PickedGameState } from './types';\n\ninterface Props\n\textends PickedGameState<\n\t\t'gameMap' | 'is3D' | 'isSideView' | 'animationCounter'\n\t> {\n\tsizes: GameConfig['sizes'];\n}\n\nconst GameMap: React.FC<Props> = ({\n\tsizes: { map: mapSize, tile: tileSize },\n\tchildren,\n\tgameMap,\n\tis3D,\n\tisSideView,\n\tanimationCounter,\n}) => {\n\treturn (\n\t\t<Map\n\t\t\tsize={mapSize}\n\t\t\tgameMap={gameMap}\n\t\t\tis3D={is3D}\n\t\t\tisTopView={!isSideView}\n\t\t\tanimationCounter={animationCounter}\n\t\t\ttileSize={tileSize}\n\t\t>\n\t\t\t{children}\n\t\t</Map>\n\t);\n};\n\nexport type { Props as GameMapProps };\nexport default GameMap;\n","import usePlayerEvents from 'store/redux/hooks/usePlayerEvents';\nimport GameContainer from './GameContainer';\nimport GameSettings from './GameSettings';\nimport GameContent from './GameContent';\nimport GameMap from './GameMap';\nimport { GameApi } from './types';\n\nconst useGameProps = (props: GameApi) => {\n\tconst {\n\t\tstate: { is3D, gameMap, isSideView, animationCounter, config },\n\t\t// provider,\n\t} = props;\n\n\tconst gameContainerProps = {\n\t\tis3D,\n\t};\n\n\tconst gameSettingProps = {\n\t\t...props,\n\t};\n\n\tconst gameMapProps = {\n\t\tsizes: config.sizes,\n\t\tgameMap,\n\t\tis3D,\n\t\tisSideView,\n\t\tanimationCounter,\n\t};\n\n\tconst gameContentProps = {\n\t\t...props,\n\t};\n\n\treturn {\n\t\tgameContainerProps,\n\t\tgameSettingProps,\n\t\tgameMapProps,\n\t\tgameContentProps,\n\t};\n};\n\nconst Game = (props: GameApi) => {\n\tconst playerIntervals = usePlayerEvents(props);\n\tconst {\n\t\tgameContainerProps,\n\t\tgameSettingProps,\n\t\tgameMapProps,\n\t\tgameContentProps,\n\t} = useGameProps(props);\n\n\treturn (\n\t\t<GameContainer {...gameContainerProps}>\n\t\t\t<GameSettings {...gameSettingProps} />\n\t\t\t<GameMap {...gameMapProps}>\n\t\t\t\t<GameContent {...gameContentProps} />\n\t\t\t</GameMap>\n\t\t\t{playerIntervals}\n\t\t</GameContainer>\n\t);\n};\n\nexport default Game;\n","// eslint-disable-next-line import/no-unresolved\nimport { WritableDraft } from 'immer/dist/types/types-external';\n\nconst updateImmerDraft = (\n\tdraft: WritableDraft<DynamicObject>,\n\tpayload: DynamicObject\n) => {\n\tObject.keys(payload).forEach(key => {\n\t\tdraft[key] = payload[key];\n\t});\n};\n\nexport { updateImmerDraft };\n","import {\n\tPlayerId,\n\tPlayers,\n\tPlayerConfig,\n\tTopLeftCoordinates,\n\tPlayerState,\n\tPlayerKeyboardConfig,\n\tSquareCoordinates,\n\tSquare,\n} from 'containers/Game/types';\nimport { PowerUp } from 'enums';\nimport {\n\tGameState,\n\tAnimatableGameMap,\n\tBombId,\n\tBomb,\n} from 'store/redux/reducers/game/types';\n\nabstract class GameUpdater {\n\t// #region GameState\n\n\t// #region \tGameState\n\tabstract updateGameState(gameState: Partial<GameState>): void;\n\t// #endregion\n\n\t// #region \tGameState.players\n\n\t// #region \t\tGameState.players\n\tabstract updatePlayers(players: Partial<Players>): void;\n\t// #endregion\n\n\t// #region \t\tGameState.players.[*]\n\tabstract addPlayer(\n\t\tplayerConfig: Partial<PlayerConfig>,\n\t\tplayerId: PlayerId\n\t): void;\n\n\tabstract updatePlayer(\n\t\tplayerConfig: Partial<PlayerConfig>,\n\t\tplayerId: PlayerId\n\t): void;\n\n\tabstract removePlayer(playerId: PlayerId): void;\n\n\t// #endregion\n\n\t// #region \t\t\tGameState.players.[*].[*PlayerConfig]\n\n\t// #region \t\t\tGameState.players.[*].[*PlayerConfig].id\n\tabstract updatePlayerId(id: PlayerId, playerId: PlayerId): void;\n\t// #endregion\n\n\t// #region \t\t\tGameState.players.[*].[*PlayerConfig].coordinates\n\tabstract updatePlayerCoordinates(\n\t\tcoordinates: TopLeftCoordinates,\n\t\tplayerId: PlayerId\n\t): void;\n\t// #endregion\n\n\t// #region \t\t\tGameState.players.[*].[*PlayerConfig].state\n\tabstract updatePlayerState(\n\t\tplayerState: Partial<PlayerState>,\n\t\tplayerId: PlayerId\n\t): void;\n\n\tabstract incrementPlayerPowerUp(powerUp: PowerUp, playerId: PlayerId): void;\n\n\tabstract incrementPlayerDeathCount(playerId: PlayerId): void;\n\t// #endregion\n\n\t// #region \t\t\tGameState.players.[*].[*PlayerConfig].keyboardConfig\n\tabstract updatePlayerPlayerKeyboardConfig(\n\t\tkeyboardConfig: Partial<PlayerKeyboardConfig>,\n\t\tplayerId: PlayerId\n\t): void;\n\t// #endregion\n\n\t// #endregion\n\n\t// #endregion\n\n\t// #region \tGameState.gameMap\n\tabstract updateGameMap(animatableGameMap: AnimatableGameMap): void;\n\n\tabstract updateGameMapSquare(\n\t\tsquareCoordinates: SquareCoordinates,\n\t\tsquare: Square\n\t): void;\n\t// #endregion\n\n\t// #region \tGameState.bombs\n\tabstract addBomb(bomb: Bomb): void;\n\n\tabstract removeBomb(bombId: BombId): void;\n\t// #endregion\n\n\t// #region \tGameState.powerUps\n\tabstract addPowerUp(\n\t\tpowerUp: PowerUp,\n\t\tsquareCoordinates: SquareCoordinates\n\t): void;\n\n\tabstract removePowerUp({ ySquare, xSquare }: SquareCoordinates): void;\n\t// #endregion\n\n\t// #region \tGameState.gameConfig\n\t// TODO: editable-game-config\n\t// #endregion\n\n\t// #region \tGameState.[*primitives]\n\n\tabstract toggleIs3D(): void;\n\n\tabstract toggleIsSideView(): void;\n\n\tabstract incrementAnimationCounter(): void;\n\n\t// #endregion\n\n\t// #endregion\n}\n\nexport default GameUpdater;\n","// import useAuth from 'store/firebase/hooks/useAuth';\n// TODO: react-router\n// import LoadingIndicator from 'components/LoadingIndicator';\n// import NoAccess from 'components/NoAccess';\n// TODO: notification-provider\n// import useNotificationProvider from 'store/redux/hooks/useNotificationProvider';\nimport {\n\tAnimatableGameMap,\n\tBomb,\n\tBombId,\n\tGameState,\n} from 'store/redux/reducers/game/types';\nimport {\n\tPlayerConfig,\n\tPlayerId,\n\tPlayerKeyboardConfig,\n\tPlayers,\n\tPlayerState,\n\tSquare,\n\tSquareCoordinates,\n\tTopLeftCoordinates,\n} from 'containers/Game/types';\nimport { PowerUp } from 'enums';\n// eslint-disable-next-line import/no-unresolved\nimport { WritableDraft } from 'immer/dist/internal';\nimport { updateImmerDraft } from 'utils/immer';\nimport GameUpdater from './GameUpdater';\n\nclass LocalGameUpdater extends GameUpdater {\n\tconstructor(\n\t\tpublic state: GameState,\n\t\tpublic draft: WritableDraft<GameState>\n\t) {\n\t\tsuper();\n\t}\n\n\t// #region GameState\n\n\t// #region \tGameState\n\n\tupdateGameState = async (gameState: Partial<GameState>) => {\n\t\tupdateImmerDraft(this.draft, gameState);\n\t};\n\n\t// #endregion\n\n\t// #region \tGameState.players\n\n\t// #region \t\tGameState.players\n\tupdatePlayers = async (players: Partial<Players>) => {\n\t\tthis.draft.players = players;\n\t};\n\t// #endregion\n\n\t// #region \t\tGameState.players.[*]\n\n\taddPlayer = async (playerConfig: PlayerConfig, playerId: PlayerId) => {\n\t\tthis.draft.players[playerId] = playerConfig;\n\t};\n\n\tupdatePlayer = async (\n\t\tplayerConfig: Partial<PlayerConfig>,\n\t\tplayerId: PlayerId\n\t) => {\n\t\tupdateImmerDraft(this.draft.players[playerId]!, playerConfig);\n\t};\n\n\tremovePlayer = async (playerId: PlayerId) => {\n\t\tdelete this.draft.players[playerId];\n\t};\n\n\t// #endregion\n\n\t// #region \t\t\tGameState.players.[*].[*PlayerConfig]\n\n\t// #region \t\t\tGameState.players.[*].[*PlayerConfig].id\n\tupdatePlayerId = async (id: PlayerId, playerId: PlayerId) => {\n\t\tthis.draft.players[playerId]!.id = id;\n\t};\n\t// #endregion\n\n\t// #region \t\t\tGameState.players.[*].[*PlayerConfig].coordinates\n\tupdatePlayerCoordinates = async (\n\t\tcoordinates: TopLeftCoordinates,\n\t\tplayerId: PlayerId\n\t) => {\n\t\tthis.draft.players[playerId]!.coordinates = coordinates;\n\t};\n\t// #endregion\n\n\t// #region \t\t\tGameState.players.[*].[*PlayerConfig].state\n\tupdatePlayerState = async (\n\t\tplayerState: Partial<PlayerState>,\n\t\tplayerId: PlayerId\n\t) => {\n\t\tupdateImmerDraft(this.draft.players[playerId]!.state, playerState);\n\t};\n\n\tincrementPlayerPowerUp = async (powerUp: PowerUp, playerId: PlayerId) => {\n\t\tthis.draft.players[playerId]!.state.powerUps[powerUp]++;\n\t};\n\n\tincrementPlayerDeathCount = async (playerId: PlayerId) => {\n\t\tthis.draft.players[playerId]!.state.deathCount++;\n\t};\n\t// #endregion\n\n\t// #region \t\t\tGameState.players.[*].[*PlayerConfig].keyboardConfig\n\tupdatePlayerPlayerKeyboardConfig = async (\n\t\tkeyboardConfig: Partial<PlayerKeyboardConfig>,\n\t\tplayerId: PlayerId\n\t) => {\n\t\tupdateImmerDraft(\n\t\t\tthis.draft.players[playerId]!.keyboardConfig || {},\n\t\t\tkeyboardConfig\n\t\t);\n\t};\n\t// #endregion\n\n\t// #endregion\n\n\t// #endregion\n\n\t// #region \tGameState.gameMap\n\n\tupdateGameMap = async ({ gameMap, animate = false }: AnimatableGameMap) => {\n\t\tthis.draft.gameMap = gameMap;\n\t\tif (animate) this.incrementAnimationCounter();\n\t};\n\n\tupdateGameMapSquare = async (\n\t\t{ xSquare, ySquare }: SquareCoordinates,\n\t\tsquare: Square\n\t) => {\n\t\tthis.draft.gameMap[ySquare][xSquare] = square;\n\t};\n\n\t// #endregion\n\n\t// #region \tGameState.bombs\n\n\taddBomb = async (bomb: Bomb) => {\n\t\tthis.draft.bombs[bomb.id] = bomb;\n\t};\n\n\tremoveBomb = async (bombId: BombId) => {\n\t\tdelete this.draft.bombs[bombId];\n\t};\n\n\t// #endregion\n\n\t// #region \tGameState.powerUps\n\n\taddPowerUp = async (\n\t\tpowerUp: PowerUp,\n\t\t{ ySquare, xSquare }: SquareCoordinates\n\t) => {\n\t\tif (!this.draft.powerUps[ySquare]) {\n\t\t\tthis.draft.powerUps[ySquare] = {};\n\t\t}\n\t\tthis.draft.powerUps[ySquare][xSquare] = powerUp;\n\t};\n\n\tremovePowerUp = async ({ ySquare, xSquare }: SquareCoordinates) => {\n\t\tthis.draft.powerUps[ySquare][xSquare] = null;\n\t};\n\n\t// #endregion\n\n\t// #region \tGameState.gameConfig\n\t// TODO: editable-game-config\n\t// #endregion\n\n\t// #region \tGameState.[*primitives]\n\n\ttoggleIs3D = async () => {\n\t\tthis.draft.is3D = !this.state.is3D;\n\t};\n\n\ttoggleIsSideView = async () => {\n\t\tthis.draft.isSideView = !this.state.isSideView;\n\t};\n\n\tincrementAnimationCounter = async () => {\n\t\tthis.draft.animationCounter++;\n\t};\n\n\t// #endregion\n\n\t// #endregion\n}\n\nexport default LocalGameUpdater;\n","import {\n\tCoordinates,\n\tSquare,\n\tPlayerId,\n\tSquareCoordinates,\n\tPlayerConfig,\n} from 'containers/Game/types';\nimport { Tile, PowerUp, Explosive, FIRE_VALUES, Player } from 'enums';\nimport {\n\tAnimatableGameMap,\n\tBombId,\n\tGameState,\n\tOnMoveProps,\n\tOnPrepareMoveProps,\n} from 'store/redux/reducers/game/types';\nimport {\n\tgetSquareCoordinatesFromSquareOrTopLeftCoordinates,\n\tgeneratePowerUpOrNull,\n\tgetPoweredUpValue,\n\ttopLeftCoordinatesToSquareCoordinates,\n\tsquareCoordinatesToTopLeftCoordinates,\n\tgetExplosionResults,\n\thandleMove,\n\tisPowerUp,\n\tgenerateBomb,\n\tgeneratePlayer,\n} from 'utils/game';\nimport LocalGameUpdater from './LocalGameUpdater';\nimport OnlineGameUpdater from './OnlineGameUpdater';\n\nclass GameUtils {\n\tconstructor(\n\t\tpublic state: GameState,\n\t\tpublic updaters: OnlineGameUpdater | LocalGameUpdater\n\t) {}\n\n\t// #region STATE UTILITIES\n\tgetPlayerState = (playerId: PlayerId) => {\n\t\treturn this.state.players[playerId]!.state;\n\t};\n\n\tisPlayerDead = (playerId: PlayerId) => {\n\t\tconst playerState = this.getPlayerState(playerId);\n\t\tconst { deathCount } = playerState;\n\t\t// < 1 to prevent instant double explosion\n\t\treturn (\n\t\t\tdeathCount >=\n\t\t\tgetPoweredUpValue(\n\t\t\t\tplayerState,\n\t\t\t\tPowerUp.Life,\n\t\t\t\tthis.state.config.powerUps\n\t\t\t)\n\t\t);\n\t};\n\n\tgetPowerUpOrNull = (coordinates: Coordinates) => {\n\t\tconst {\n\t\t\txSquare,\n\t\t\tySquare,\n\t\t} = getSquareCoordinatesFromSquareOrTopLeftCoordinates(\n\t\t\tcoordinates,\n\t\t\tthis.state.config.sizes.movement\n\t\t);\n\n\t\ttry {\n\t\t\tconst currentSquare = this.state.gameMap[ySquare][xSquare];\n\t\t\tif (currentSquare !== Tile.Breaking) return null;\n\t\t\tconst powerUpOrNull = generatePowerUpOrNull(\n\t\t\t\tthis.state.config.powerUps.chance\n\t\t\t);\n\t\t\tif (!powerUpOrNull) return null;\n\t\t\treturn currentSquare === Tile.Breaking\n\t\t\t\t? {\n\t\t\t\t\t\tsquare: powerUpOrNull,\n\t\t\t\t\t\tcoordinates: { ySquare, xSquare },\n\t\t\t\t  }\n\t\t\t\t: null;\n\t\t} catch (err) {\n\t\t\tconsole.error('Square being set is out of boundaries', {\n\t\t\t\tgameMap: this.state.gameMap,\n\t\t\t\txSquare,\n\t\t\t\tySquare,\n\t\t\t});\n\t\t\treturn null;\n\t\t}\n\t};\n\n\tgetBombCountForPlayer = (playerId: PlayerId) => {\n\t\treturn getPoweredUpValue(\n\t\t\tthis.getPlayerState(playerId),\n\t\t\tPowerUp.BombCount,\n\t\t\tthis.state.config.powerUps\n\t\t);\n\t};\n\n\tgetBombSizeForPlayer = (playerId: PlayerId) => {\n\t\treturn getPoweredUpValue(\n\t\t\tthis.getPlayerState(playerId),\n\t\t\tPowerUp.BombSize,\n\t\t\tthis.state.config.powerUps\n\t\t);\n\t};\n\n\tgetMovementSpeedForPlayer = (playerId: PlayerId) => {\n\t\treturn getPoweredUpValue(\n\t\t\tthis.getPlayerState(playerId),\n\t\t\tPowerUp.MovementSpeed,\n\t\t\tthis.state.config.powerUps\n\t\t);\n\t};\n\n\tgetBombToTriggerFromExplosion = (\n\t\tcoordinates: SquareCoordinates,\n\t\tcurrentBombId: BombId\n\t) => {\n\t\tconst { ySquare, xSquare } = coordinates;\n\t\t// if there is a bomb by where the explosion hits,\n\t\t// trigger that bomb as well\n\t\tif (this.state.gameMap[ySquare][xSquare] !== Explosive.Bomb)\n\t\t\treturn null;\n\t\tconst { top, left } = squareCoordinatesToTopLeftCoordinates(\n\t\t\tcoordinates,\n\t\t\tthis.state.config.sizes.movement\n\t\t);\n\t\tconst bombToTrigger = Object.values(this.state.bombs).find(\n\t\t\t({ top: t, left: l }) => top === t && left === l\n\t\t);\n\t\t// there is no bomb there\n\t\tif (!bombToTrigger) return null;\n\t\t// don't recurse on the same bomb that's triggering\n\t\t// the explosion\n\t\tif (bombToTrigger.id === currentBombId) return null;\n\n\t\treturn bombToTrigger;\n\t};\n\t// #endregion\n\n\t// #region DRAFT UTILITIES\n\tsetSquare = (coordinates: Coordinates, newSquare: Square) => {\n\t\t// eslint-disable-next-line max-len\n\t\tconst squareCoordinates = getSquareCoordinatesFromSquareOrTopLeftCoordinates(\n\t\t\tcoordinates,\n\t\t\tthis.state.config.sizes.movement\n\t\t);\n\n\t\ttry {\n\t\t\tthis.updaters.updateGameMapSquare(squareCoordinates, newSquare);\n\t\t} catch (err) {\n\t\t\tconsole.error('Square being set is out of boundaries', {\n\t\t\t\tgameMap: this.state.gameMap,\n\t\t\t\tsquareCoordinates,\n\t\t\t});\n\t\t}\n\t};\n\n\tpopulatePowerUps = (coordinates: Coordinates) => {\n\t\tconst powerUpOrNull = this.getPowerUpOrNull(coordinates);\n\t\tif (!powerUpOrNull) return;\n\n\t\tconst { square, coordinates: powerUpCoordinates } = powerUpOrNull;\n\t\tthis.updaters.addPowerUp(square as PowerUp, powerUpCoordinates);\n\t};\n\n\thandlePlayerExplosionHit = (currentFireCoordinates: SquareCoordinates) => {\n\t\tconst { xSquare, ySquare } = currentFireCoordinates;\n\t\tObject.values<PlayerConfig>(this.state.players).forEach(\n\t\t\t({ id: playerId, coordinates }) => {\n\t\t\t\tconst {\n\t\t\t\t\txSquare: playerXSquare,\n\t\t\t\t\tySquare: playerYSquare,\n\t\t\t\t} = topLeftCoordinatesToSquareCoordinates(\n\t\t\t\t\tcoordinates,\n\t\t\t\t\tthis.state.config.sizes.movement\n\t\t\t\t);\n\t\t\t\tif (playerXSquare === xSquare && playerYSquare === ySquare) {\n\t\t\t\t\tthis.updaters.incrementPlayerDeathCount(playerId);\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t};\n\n\ttriggerChainExplosion = (bombId: BombId, bombsToSkip: Array<BombId>) => {\n\t\tconst explosionToComplete: Set<BombId> = new Set();\n\t\t// allows us to not re-trigger explosion due to\n\t\t// two adjacent explosions\n\t\tif (bombsToSkip.includes(bombId)) return explosionToComplete;\n\t\tconst currentBomb = this.state.bombs[bombId];\n\n\t\t// If we recursively triggered it\n\t\tif (!currentBomb) return explosionToComplete;\n\n\t\tconst bombCoordinates = {\n\t\t\ttop: currentBomb.top,\n\t\t\tleft: currentBomb.left,\n\t\t};\n\n\t\tconst bombSize = this.getBombSizeForPlayer(currentBomb.playerId);\n\n\t\t// find surrounding objects to modify\n\t\tconst { coordinatesToSetOnFire } = getExplosionResults(\n\t\t\tthis.state.gameMap,\n\t\t\tthis.state.players,\n\t\t\tbombCoordinates,\n\t\t\tbombSize,\n\t\t\tthis.state.config.sizes\n\t\t);\n\n\t\tconst { horizontal, vertical, core } = coordinatesToSetOnFire;\n\n\t\t// set fire on all the coordinates\n\t\t// this automatically \"breaks\" the breakable tiles\n\t\t// URGENT: This will also contain two entity if Tile, Tile & Fire\n\t\t[\n\t\t\t{\n\t\t\t\tfireCoordinates: core,\n\t\t\t\tdirection: Explosive.FireCore,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfireCoordinates: horizontal,\n\t\t\t\tdirection: Explosive.FireHorizontal,\n\t\t\t},\n\t\t\t{\n\t\t\t\tfireCoordinates: vertical,\n\t\t\t\tdirection: Explosive.FireVertical,\n\t\t\t},\n\t\t].forEach(({ fireCoordinates, direction }) => {\n\t\t\tfireCoordinates.forEach(coordinates => {\n\t\t\t\t// check if there is a tile and get a random power up or null\n\t\t\t\tthis.populatePowerUps(coordinates);\n\t\t\t\tthis.setSquare(coordinates, direction);\n\n\t\t\t\t// subtract a life from the players if they are hit\n\t\t\t\t// URGENT: We want this to happen only once\n\t\t\t\tthis.handlePlayerExplosionHit(coordinates);\n\n\t\t\t\tconst currentBombId = currentBomb.id;\n\t\t\t\t// if there are bombs caught in fire, explode them\n\t\t\t\tconst bombToTrigger = this.getBombToTriggerFromExplosion(\n\t\t\t\t\tcoordinates,\n\t\t\t\t\tcurrentBombId\n\t\t\t\t);\n\t\t\t\tif (bombToTrigger) {\n\t\t\t\t\tconst _explosionToComplete = this.triggerChainExplosion(\n\t\t\t\t\t\tbombToTrigger.id,\n\t\t\t\t\t\t[...bombsToSkip, currentBombId]\n\t\t\t\t\t);\n\t\t\t\t\t_explosionToComplete.forEach(bId =>\n\t\t\t\t\t\texplosionToComplete.add(bId)\n\t\t\t\t\t);\n\t\t\t\t\texplosionToComplete.add(bombToTrigger.id);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn explosionToComplete;\n\t};\n\n\t// #endregion\n\n\t// #region API\n\tsetGameState = (gameState: GameState) => {\n\t\tthis.updaters.updateGameState(gameState);\n\t};\n\n\tstartGame = () => {\n\t\t// this.updaters.\n\t};\n\n\tendGame = () => {\n\t\t// this.updaters.\n\t};\n\n\tsetGameMap = (animatableGameMap: AnimatableGameMap) => {\n\t\tthis.updaters.updateGameMap(animatableGameMap);\n\t};\n\n\ttriggerMove = ({\n\t\tplayerId,\n\t\tdirection,\n\t\tonComplete,\n\t\tref,\n\t}: OnPrepareMoveProps) => {\n\t\tif (this.isPlayerDead(playerId)) return;\n\n\t\tconst { is3D, players, gameMap } = this.state;\n\t\tconst playerConfig = players[playerId] as PlayerConfig;\n\n\t\thandleMove(\n\t\t\t{\n\t\t\t\tplayerConfig,\n\t\t\t\tdirection,\n\t\t\t\tis3D,\n\t\t\t\tgameMap,\n\t\t\t},\n\t\t\tthis.getMovementSpeedForPlayer(playerId),\n\t\t\tonComplete,\n\t\t\tref,\n\t\t\tthis.state.config.sizes\n\t\t);\n\t};\n\n\tmakeMove = ({ playerId, newCoordinates }: OnMoveProps) => {\n\t\tif (this.isPlayerDead(playerId)) return;\n\t\t// if there is a powerUp, assign it to the playerState\n\t\tconst {\n\t\t\tySquare: newCoordinateYSquare,\n\t\t\txSquare: newCoordinateXSquare,\n\t\t} = topLeftCoordinatesToSquareCoordinates(\n\t\t\tnewCoordinates,\n\t\t\tthis.state.config.sizes.movement\n\t\t);\n\n\t\tconst newSquare = this.state.gameMap[newCoordinateYSquare][\n\t\t\tnewCoordinateXSquare\n\t\t];\n\n\t\t// if a player steps on explosion fire, subtract a life\n\t\t// ??!!: This doesn't account for moving on the same bomb\n\t\t// explosion. If the player continues to move under the\n\t\t// same explosion fire, he will continuously lose a life\n\t\tif (FIRE_VALUES.includes(newSquare as Explosive)) {\n\t\t\tthis.updaters.incrementPlayerDeathCount(playerId);\n\n\t\t\t// if he is dead, stop here\n\t\t\tif (this.isPlayerDead(playerId)) return;\n\t\t\t// URGENT: Pick Bomb over Player on map, this will also be\n\t\t\t// required by the NPC, but again, gotta handle multiple\n\t\t\t// Square types in one square inside gameMap\n\t\t} else {\n\t\t\t// set new player square\n\t\t\tthis.setSquare(\n\t\t\t\t{\n\t\t\t\t\tySquare: newCoordinateYSquare,\n\t\t\t\t\txSquare: newCoordinateXSquare,\n\t\t\t\t},\n\t\t\t\tplayerId as Player\n\t\t\t);\n\t\t}\n\n\t\tconst lastCoordinates = this.state.players[playerId]!.coordinates;\n\n\t\tconst {\n\t\t\tySquare: lastCoordinateYSquare,\n\t\t\txSquare: lastCoordinateXSquare,\n\t\t} = topLeftCoordinatesToSquareCoordinates(\n\t\t\tlastCoordinates,\n\t\t\tthis.state.config.sizes.movement\n\t\t);\n\t\t// this can also be a bomb, we don't want to just clear it\n\t\tconst lastSquare = this.state.gameMap[lastCoordinateYSquare][\n\t\t\tlastCoordinateXSquare\n\t\t];\n\t\t// clear lastSquare only if it was the player\n\t\t// (on a Tile.Empty)\n\t\t// otherwise we can leave whatever was there\n\t\tif (lastSquare === playerId) {\n\t\t\tthis.setSquare(\n\t\t\t\t{\n\t\t\t\t\tySquare: lastCoordinateYSquare,\n\t\t\t\t\txSquare: lastCoordinateXSquare,\n\t\t\t\t},\n\t\t\t\tTile.Empty\n\t\t\t);\n\t\t}\n\t\tconst powerUpOrEmptyTile = this.state.gameMap[newCoordinateYSquare][\n\t\t\tnewCoordinateXSquare\n\t\t] as PowerUp;\n\t\tif (isPowerUp(powerUpOrEmptyTile)) {\n\t\t\tthis.updaters.incrementPlayerPowerUp(powerUpOrEmptyTile, playerId);\n\t\t}\n\n\t\t// update player's topLeft coordinates\n\t\tthis.updaters.updatePlayerCoordinates(newCoordinates, playerId);\n\t};\n\n\tdropBomb = (playerId: PlayerId) => {\n\t\tif (this.isPlayerDead(playerId)) return;\n\n\t\tconst playerConfig = this.state.players[playerId]!;\n\t\tconst { coordinates } = playerConfig;\n\t\tconst {\n\t\t\txSquare,\n\t\t\tySquare,\n\t\t} = getSquareCoordinatesFromSquareOrTopLeftCoordinates(\n\t\t\tcoordinates,\n\t\t\tthis.state.config.sizes.movement\n\t\t);\n\t\t// prevent double bomb in one spot\n\t\tif (this.state.gameMap[ySquare][xSquare] === Explosive.Bomb) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst playerBombCountOnMap = Object.values(this.state.bombs).filter(\n\t\t\t({ playerId: pId }) => pId === playerId\n\t\t).length;\n\t\t// ??!!: is >= possible? will > suffice?\n\t\t// don't put more bombs than what you have\n\t\tif (playerBombCountOnMap >= this.getBombCountForPlayer(playerId)) {\n\t\t\treturn;\n\t\t}\n\t\tconst bomb = generateBomb(playerConfig, this.state.config.powerUps);\n\t\tthis.updaters.addBomb(bomb);\n\n\t\t// URGENT: This block will contain both the player and the bomb\n\t\t// TODO: Figure out a proper way to handle this for NPC\n\t\tthis.setSquare(playerConfig.coordinates, Explosive.Bomb);\n\t};\n\n\ttriggerExplosion = (bombId: BombId, cb?: CallableFunction) => {\n\t\t// if current bomb already exploded, don't trigger it again\n\t\t// prevents: state update on an unmounted component\n\t\tif (!this.state.bombs[bombId]) {\n\t\t\treturn;\n\t\t}\n\t\tconst explosionsToComplete = this.triggerChainExplosion(bombId, []);\n\t\tcb?.(explosionsToComplete);\n\t};\n\n\tonExplosionComplete = (bombId: BombId) => {\n\t\tconst currentBomb = this.state.bombs[bombId];\n\n\t\t// If we recursively triggered it\n\t\tif (!currentBomb) return;\n\n\t\tconst bombCoordinates = {\n\t\t\ttop: currentBomb.top,\n\t\t\tleft: currentBomb.left,\n\t\t};\n\n\t\tconst bombSize = this.getBombSizeForPlayer(currentBomb.playerId);\n\n\t\t// remove bomb\n\t\tthis.updaters.removeBomb(bombId);\n\t\tconst { coordinatesToSetOnFire } = getExplosionResults(\n\t\t\tthis.state.gameMap,\n\t\t\tthis.state.players,\n\t\t\tbombCoordinates,\n\t\t\tbombSize,\n\t\t\tthis.state.config.sizes,\n\t\t\ttrue\n\t\t);\n\n\t\t// clear fire\n\t\tObject.values(coordinatesToSetOnFire)\n\t\t\t.flat()\n\t\t\t.forEach(coordinates => {\n\t\t\t\tconst {\n\t\t\t\t\txSquare,\n\t\t\t\t\tySquare,\n\t\t\t\t} = getSquareCoordinatesFromSquareOrTopLeftCoordinates(\n\t\t\t\t\tcoordinates,\n\t\t\t\t\tthis.state.config.sizes.movement\n\t\t\t\t);\n\t\t\t\t// if there is a powerUp, put it on the map\n\t\t\t\tconst powerUpOrNull = this.state.powerUps[ySquare]?.[xSquare];\n\t\t\t\tif (powerUpOrNull) {\n\t\t\t\t\tthis.setSquare(coordinates, powerUpOrNull);\n\t\t\t\t\t// empty the powerUp from the state\n\t\t\t\t\tthis.updaters.removePowerUp({ xSquare, ySquare });\n\t\t\t\t} else {\n\t\t\t\t\tthis.setSquare(coordinates, Tile.Empty);\n\t\t\t\t}\n\t\t\t});\n\t};\n\n\ttriggerGameAnimation = () => {\n\t\tthis.updaters.incrementAnimationCounter();\n\t};\n\n\ttoggleGameDimension = () => {\n\t\tthis.updaters.toggleIs3D();\n\t};\n\n\ttoggleGamePerspective = () => {\n\t\tthis.updaters.toggleIsSideView();\n\t};\n\n\ttoggleGameTwoPlayer = () => {\n\t\tif (this.state.players.P2) {\n\t\t\tthis.updaters.removePlayer(Player.P2);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updaters.addPlayer(\n\t\t\tgeneratePlayer(Player.P2, this.state.config),\n\t\t\tPlayer.P2\n\t\t);\n\t};\n\n\ttoggleGameNpc = () => {\n\t\tif (this.state.players.P4) {\n\t\t\tthis.updaters.removePlayer(Player.P4);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updaters.addPlayer(\n\t\t\tgeneratePlayer(Player.P4, this.state.config),\n\t\t\tPlayer.P4\n\t\t);\n\t};\n\t// #endregion\n}\n\nexport default GameUtils;\n","import { generateDefaultGameState } from 'utils/game';\nimport { GameState } from './types';\n\n// Defaults\nconst KEY = 'Game';\nconst DEFAULT_VALUES: GameState = generateDefaultGameState();\n\n// Types\nconst SET_GAME_STATE = `${KEY}/SET_GAME_STATE`;\nconst START_GAME = `${KEY}/START_GAME`;\nconst END_GAME = `${KEY}/END_GAME`;\nconst SET_GAME_MAP = `${KEY}/SET_GAME_MAP`;\n// GAME ACTIONS\nconst MAKE_MOVE = `${KEY}/MAKE_MOVE`;\nconst TRIGGER_MOVE = `${KEY}/TRIGGER_MOVE`;\nconst DROP_BOMB = `${KEY}/DROP_BOMB`;\nconst TRIGGER_EXPLOSION = `${KEY}/TRIGGER_EXPLOSION`;\nconst ON_EXPLOSION_COMPLETE = `${KEY}/ON_EXPLOSION_COMPLETE`;\n// GAME SETTINGS\nconst TRIGGER_GAME_ANIMATION = `${KEY}/TRIGGER_ANIMATION`;\nconst TOGGLE_GAME_DIMENSION = `${KEY}/TOGGLE_GAME_DIMENSION`;\nconst TOGGLE_GAME_PERSPECTIVE = `${KEY}/TOGGLE_GAME_PERSPECTIVE`;\nconst TOGGLE_GAME_TWO_PLAYER = `${KEY}/TOGGLE_GAME_TWO_PLAYER`;\nconst TOGGLE_GAME_NPC = `${KEY}/TOGGLE_GAME_NPC`;\n\nexport {\n\tKEY,\n\tDEFAULT_VALUES,\n\tSET_GAME_STATE,\n\tSTART_GAME,\n\tEND_GAME,\n\tSET_GAME_MAP,\n\tTRIGGER_EXPLOSION,\n\tON_EXPLOSION_COMPLETE,\n\t// GAME ACTIONS\n\tMAKE_MOVE,\n\tTRIGGER_MOVE,\n\tDROP_BOMB,\n\t// GAME SETTINGS\n\tTRIGGER_GAME_ANIMATION,\n\tTOGGLE_GAME_DIMENSION,\n\tTOGGLE_GAME_PERSPECTIVE,\n\tTOGGLE_GAME_TWO_PLAYER,\n\tTOGGLE_GAME_NPC,\n};\n","import { PlayerId } from 'containers/Game/types';\nimport produce from 'immer';\nimport { Reducer } from 'redux';\nimport LocalGameUpdater from 'api/LocalGameUpdater';\nimport GameUtils from 'api/GameUtils';\nimport {\n\tDEFAULT_VALUES,\n\tSET_GAME_STATE,\n\tSTART_GAME,\n\tEND_GAME,\n\tSET_GAME_MAP,\n\tTRIGGER_GAME_ANIMATION,\n\tTOGGLE_GAME_DIMENSION,\n\tTOGGLE_GAME_PERSPECTIVE,\n\tTOGGLE_GAME_TWO_PLAYER,\n\tTOGGLE_GAME_NPC,\n\tMAKE_MOVE,\n\tDROP_BOMB,\n\tON_EXPLOSION_COMPLETE,\n\tTRIGGER_MOVE,\n\tTRIGGER_EXPLOSION,\n} from './constants';\nimport {\n\tAnimatableGameMap,\n\tBombId,\n\tGameAction,\n\tGameState,\n\tOnMoveProps,\n\tOnPrepareMoveProps,\n} from './types';\n\nconst gameReducer: Reducer<GameState, GameAction> = (\n\tstate = DEFAULT_VALUES,\n\taction\n) => {\n\treturn produce(state, draft => {\n\t\tconst gameUpdater = new LocalGameUpdater(state, draft);\n\t\tconst gameUtils = new GameUtils(state, gameUpdater);\n\n\t\tswitch (action.type) {\n\t\t\tcase SET_GAME_STATE:\n\t\t\t\tgameUtils.setGameState(action.payload as GameState);\n\t\t\t\tbreak;\n\t\t\tcase START_GAME:\n\t\t\t\tgameUtils.startGame();\n\t\t\t\tbreak;\n\t\t\tcase END_GAME:\n\t\t\t\tgameUtils.endGame();\n\t\t\t\tbreak;\n\t\t\tcase SET_GAME_MAP: {\n\t\t\t\tgameUtils.setGameMap(action.payload as AnimatableGameMap);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// GAME ACTIONS\n\t\t\tcase TRIGGER_MOVE: {\n\t\t\t\tgameUtils.triggerMove(action.payload as OnPrepareMoveProps);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MAKE_MOVE: {\n\t\t\t\tgameUtils.makeMove(action.payload as OnMoveProps);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase DROP_BOMB: {\n\t\t\t\tgameUtils.dropBomb(action.payload as PlayerId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TRIGGER_EXPLOSION: {\n\t\t\t\tgameUtils.triggerExplosion(action.payload as BombId, action.cb);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase ON_EXPLOSION_COMPLETE: {\n\t\t\t\tgameUtils.onExplosionComplete(action.payload as BombId);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// #region GAME SETTINGS\n\t\t\tcase TRIGGER_GAME_ANIMATION:\n\t\t\t\tgameUtils.triggerGameAnimation();\n\t\t\t\tbreak;\n\t\t\tcase TOGGLE_GAME_DIMENSION:\n\t\t\t\tgameUtils.toggleGameDimension();\n\t\t\t\tbreak;\n\t\t\tcase TOGGLE_GAME_PERSPECTIVE:\n\t\t\t\tgameUtils.toggleGamePerspective();\n\t\t\t\tbreak;\n\t\t\tcase TOGGLE_GAME_TWO_PLAYER:\n\t\t\t\tgameUtils.toggleGameTwoPlayer();\n\t\t\t\tbreak;\n\t\t\tcase TOGGLE_GAME_NPC:\n\t\t\t\tgameUtils.toggleGameNpc();\n\t\t\t\tbreak;\n\t\t\t// #endregion\n\t\t\tdefault:\n\t\t\t\t// No default\n\t\t\t\tbreak;\n\t\t}\n\t});\n};\n\nexport default gameReducer;\n","import { combineReducers } from 'redux';\nimport { firebaseReducer } from 'react-redux-firebase';\nimport { firestoreReducer } from 'redux-firestore';\nimport { Store } from '../types';\nimport gameReducer, { gameKey } from './game';\n\nconst rootReducer = combineReducers<Store>({\n\tfirebase: firebaseReducer,\n\tfirestore: firestoreReducer,\n\t[gameKey]: gameReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, PreloadedState } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport rootReducer from './reducers';\n\nconst configureStore = <Store>(initialState: PreloadedState<Store>) => {\n\t// Create the store with two middlewares\n\t// thunkMiddleware: Handle async calls\n\tconst middleware = [thunkMiddleware];\n\tconst enhancer = applyMiddleware(...middleware);\n\n\tconst store = createStore(\n\t\trootReducer,\n\t\tinitialState,\n\t\tcomposeWithDevTools(enhancer)\n\t);\n\n\t// Hot reload the store\n\tif (process.env.NODE_ENV !== 'production' && module.hot) {\n\t\tmodule.hot.accept('./reducers', () => {\n\t\t\tstore.replaceReducer(rootReducer);\n\t\t});\n\t}\n\n\treturn store;\n};\n\nexport default configureStore;\n","import { createSelector, Selector } from 'reselect';\nimport { Store } from 'store/redux/types';\nimport { DEFAULT_VALUES, KEY } from './constants';\nimport { GameState } from './types';\n\n// Direct selector to the visible state\nconst selectGameProps: Selector<Store, GameState> = state => {\n\treturn state[KEY] || DEFAULT_VALUES;\n};\n\n// Other specific selectors\n// #region GAME ACTION STATES\nconst makeSelectGamePlayers = () => {\n\treturn createSelector(selectGameProps, ({ players }) => players);\n};\n\nconst makeSelectGameBombs = () => {\n\treturn createSelector(selectGameProps, ({ bombs }) => bombs);\n};\n// //#endregion\n\n// #region GAME SETTINGS\nconst makeSelectGameConfig = () => {\n\treturn createSelector(selectGameProps, ({ config }) => config);\n};\n\nconst makeSelectGameIs3D = () => {\n\treturn createSelector(selectGameProps, ({ is3D }) => is3D);\n};\n\nconst makeSelectGameIsSideView = () => {\n\treturn createSelector(selectGameProps, ({ isSideView }) => isSideView);\n};\n\nconst makeSelectGameMap = () => {\n\treturn createSelector(selectGameProps, ({ gameMap }) => gameMap);\n};\n\nconst makeSelectGameAnimationCounter = () => {\n\treturn createSelector(\n\t\tselectGameProps,\n\t\t({ animationCounter }) => animationCounter\n\t);\n};\n// #endregion\n\n// Default selector\nconst makeSelectGameState = () => {\n\treturn createSelector(selectGameProps, state => state);\n};\n\nexport {\n\tselectGameProps,\n\t// GAME ACTION STATES\n\tmakeSelectGamePlayers,\n\tmakeSelectGameBombs,\n\t// GAME SETTINGS\n\tmakeSelectGameConfig,\n\tmakeSelectGameIs3D,\n\tmakeSelectGameIsSideView,\n\tmakeSelectGameMap,\n\tmakeSelectGameAnimationCounter,\n};\nexport default makeSelectGameState;\n","import { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n\tsetGameState,\n\tsetGameMap,\n\ttriggerGameAnimation,\n\ttoggleGamePerspective,\n\ttoggleGameDimension,\n\ttoggleGameNPC,\n\ttoggleGameTwoPlayer,\n\tmakeMoveInGame,\n\tdropBombInGame,\n\tonExplosionCompleteInGame,\n\ttriggerMoveInGame,\n\ttriggerExplosionInGame,\n} from 'store/redux/reducers/game/actions';\nimport {\n\tAnimatableGameMap,\n\tBombFn,\n\tBombId,\n\tGameState,\n\tOnMoveProps,\n\tOnTriggerMove,\n} from 'store/redux/reducers/game/types';\nimport { generateRandomGameMap } from 'utils/game';\nimport { makeSelectGameConfig } from 'store/redux/reducers/game/selectors';\nimport { OnDropBomb } from 'containers/Game/types';\n\nconst useGameProvider = () => {\n\tconst dispatch = useDispatch();\n\tconst {\n\t\tsizes: { map: mapSize },\n\t\ttiles: { blockTileChance },\n\t} = useSelector(makeSelectGameConfig());\n\n\tconst updateGameSettings = useCallback(\n\t\t(payload: GameState) => dispatch(setGameState(payload)),\n\t\t[dispatch]\n\t);\n\n\tconst updateGameMap = useCallback(\n\t\t(props: AnimatableGameMap) => dispatch(setGameMap(props)),\n\t\t[dispatch]\n\t);\n\n\tconst generateNewCollisionCoordinates = useCallback(\n\t\t() =>\n\t\t\tupdateGameMap({\n\t\t\t\tgameMap: generateRandomGameMap(mapSize, blockTileChance),\n\t\t\t\tanimate: true,\n\t\t\t}),\n\t\t[blockTileChance, mapSize, updateGameMap]\n\t);\n\n\t// #region GAME ACTIONS\n\tconst makeMove = useCallback(\n\t\t(props: OnMoveProps) => dispatch(makeMoveInGame(props)),\n\t\t[dispatch]\n\t);\n\n\tconst triggerMove = useCallback<OnTriggerMove>(\n\t\tprops =>\n\t\t\tdispatch(\n\t\t\t\ttriggerMoveInGame({\n\t\t\t\t\t...props,\n\t\t\t\t\tonComplete: makeMove,\n\t\t\t\t})\n\t\t\t),\n\t\t[dispatch, makeMove]\n\t);\n\n\tconst dropBomb = useCallback<OnDropBomb>(\n\t\tplayerId => dispatch(dropBombInGame(playerId)),\n\t\t[dispatch]\n\t);\n\n\tconst triggerExplosion = useCallback<BombFn>(\n\t\t(bombId, cb) => dispatch(triggerExplosionInGame(bombId, cb)),\n\t\t[dispatch]\n\t);\n\n\tconst onExplosionComplete = useCallback(\n\t\t(bombId: BombId) => {\n\t\t\tdispatch(onExplosionCompleteInGame(bombId));\n\t\t},\n\t\t[dispatch]\n\t);\n\t// #endregion\n\n\t// #region GAME SETTINGS\n\tconst triggerAnimation = useCallback(\n\t\t() => dispatch(triggerGameAnimation()),\n\t\t[dispatch]\n\t);\n\n\tconst toggleDimension = useCallback(() => dispatch(toggleGameDimension()), [\n\t\tdispatch,\n\t]);\n\n\tconst togglePerspective = useCallback(\n\t\t() => dispatch(toggleGamePerspective()),\n\t\t[dispatch]\n\t);\n\n\tconst toggleTwoPlayer = useCallback(() => dispatch(toggleGameTwoPlayer()), [\n\t\tdispatch,\n\t]);\n\n\tconst toggleNPC = useCallback(() => dispatch(toggleGameNPC()), [dispatch]);\n\t// #endregion\n\n\treturn {\n\t\tupdateGameSettings,\n\t\tgenerateNewCollisionCoordinates,\n\t\t// GAME ACTIONS\n\t\tmakeMove,\n\t\ttriggerMove,\n\t\tdropBomb,\n\t\ttriggerExplosion,\n\t\tonExplosionComplete,\n\t\t// GAME SETTINGS\n\t\ttriggerAnimation,\n\t\ttoggleDimension,\n\t\ttogglePerspective,\n\t\ttoggleTwoPlayer,\n\t\ttoggleNPC,\n\t};\n};\n\ntype GameProvider = ReturnType<typeof useGameProvider>;\n\nexport type { GameProvider };\nexport default useGameProvider;\n","import {\n\tDROP_BOMB,\n\tMAKE_MOVE,\n\tON_EXPLOSION_COMPLETE,\n\tSET_GAME_MAP,\n\tSET_GAME_STATE,\n\tTOGGLE_GAME_DIMENSION,\n\tTOGGLE_GAME_NPC,\n\tTOGGLE_GAME_PERSPECTIVE,\n\tTOGGLE_GAME_TWO_PLAYER,\n\tTRIGGER_EXPLOSION,\n\tTRIGGER_GAME_ANIMATION,\n\tTRIGGER_MOVE,\n} from './constants';\nimport { GameActionFn } from './types';\n\nconst setGameState: GameActionFn = payload => ({\n\ttype: SET_GAME_STATE,\n\tpayload,\n});\n\nconst setGameMap: GameActionFn = payload => ({\n\ttype: SET_GAME_MAP,\n\tpayload,\n});\n\n// #region GAME ACTIONS\nconst makeMoveInGame: GameActionFn = payload => ({\n\ttype: MAKE_MOVE,\n\tpayload,\n});\n\nconst triggerMoveInGame: GameActionFn = payload => ({\n\ttype: TRIGGER_MOVE,\n\tpayload,\n});\n\nconst dropBombInGame: GameActionFn = payload => ({\n\ttype: DROP_BOMB,\n\tpayload,\n});\n\nconst triggerExplosionInGame: GameActionFn = (payload, cb) => ({\n\ttype: TRIGGER_EXPLOSION,\n\tpayload,\n\tcb,\n});\n\nconst onExplosionCompleteInGame: GameActionFn = payload => ({\n\ttype: ON_EXPLOSION_COMPLETE,\n\tpayload,\n});\n// #endregion\n\n// #region GAME SETTINGS\nconst triggerGameAnimation: GameActionFn = () => ({\n\ttype: TRIGGER_GAME_ANIMATION,\n});\n\nconst toggleGameDimension: GameActionFn = () => ({\n\ttype: TOGGLE_GAME_DIMENSION,\n});\n\nconst toggleGamePerspective: GameActionFn = () => ({\n\ttype: TOGGLE_GAME_PERSPECTIVE,\n});\n\nconst toggleGameTwoPlayer: GameActionFn = () => ({\n\ttype: TOGGLE_GAME_TWO_PLAYER,\n});\n\nconst toggleGameNPC: GameActionFn = () => ({\n\ttype: TOGGLE_GAME_NPC,\n});\n// #endregion\n\nexport {\n\tsetGameState,\n\tsetGameMap,\n\t// GAME ACTIONS\n\tmakeMoveInGame,\n\ttriggerMoveInGame,\n\tdropBombInGame,\n\ttriggerExplosionInGame,\n\tonExplosionCompleteInGame,\n\t// GAME SETTINGS\n\ttriggerGameAnimation,\n\ttoggleGameDimension,\n\ttoggleGamePerspective,\n\ttoggleGameTwoPlayer,\n\ttoggleGameNPC,\n};\n","import { GameApiHook } from 'containers/Game/types';\nimport { useSelector } from 'react-redux';\nimport makeSelectGameState from '../reducers/game/selectors';\nimport useGameProvider from './useGameProvider';\n\nconst useLocalGame: GameApiHook = () => {\n\tconst provider = useGameProvider();\n\tconst state = useSelector(makeSelectGameState());\n\n\treturn {\n\t\tprovider,\n\t\tstate,\n\t};\n};\n\nexport default useLocalGame;\n","import firebase from 'firebase/app';\nimport 'firebase/database';\nimport 'firebase/firestore';\nimport 'firebase/analytics';\nimport { createFirestoreInstance } from 'redux-firestore';\nimport { ReactReduxFirebaseProviderProps } from 'react-redux-firebase';\nimport { Store } from 'redux';\nimport { FirebaseObjects } from './types';\n\nconst firebaseConfig = {\n\tapiKey: process.env.REACT_APP_API_KEY,\n\tauthDomain: process.env.REACT_APP_AUTH_DOMAIN,\n\tdatabaseURL: process.env.REACT_APP_DATABASE_URL,\n\tprojectId: process.env.REACT_APP_PROJECT_ID,\n\tstorageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n\tmessagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n\tappId: process.env.REACT_APP_APP_ID,\n\tmeasurementId: process.env.REACT_APP_MEASUREMENT_ID,\n};\n\n// Initialize firebase instance\nfirebase.initializeApp(firebaseConfig);\n\n// Initialize other services on firebase instance\nfirebase.firestore();\nfirebase.analytics();\n\nconst reactReduxFirebaseConfig: ReactReduxFirebaseProviderProps['config'] = {\n\tuserProfile: 'users',\n\t// profileParamsToPopulate: [\n\t// \t{ child: 'role', root: 'roles' }, // populates user's role with matching role object from roles\n\t// ],\n\t// Add \"User\" role to the user on signUp\n\tprofileFactory: user => {\n\t\tif (!user) {\n\t\t\t// TODO: double check this\n\t\t\tthrow new Error('Error creating the user, the user was not found');\n\t\t}\n\t\t// const _user = user?.user || user;\n\t\tconst profile: FirebaseObjects.Generic = {\n\t\t\temail: user.email || user.providerData[0]?.email || null,\n\t\t\troles: ['User'],\n\t\t};\n\t\tif (user.providerData && user.providerData.length) {\n\t\t\tprofile.providerData = user.providerData;\n\t\t}\n\t\treturn profile;\n\t},\n};\n\nconst getReactReduxFirebaseProps = (store: Store) => ({\n\tfirebase,\n\tconfig: reactReduxFirebaseConfig,\n\tdispatch: store.dispatch,\n\tcreateFirestoreInstance,\n});\n\nexport { firebaseConfig, reactReduxFirebaseConfig, getReactReduxFirebaseProps };\n","import { useSelector } from 'react-redux';\nimport { makeSelectGameConfig } from 'store/redux/reducers/game/selectors';\nimport { GlobalStyles } from 'theme';\n\nconst ThemeProvider: React.FC = ({ children }) => {\n\tconst gameConfig = useSelector(makeSelectGameConfig());\n\n\treturn (\n\t\t<>\n\t\t\t{children}\n\t\t\t<GlobalStyles $gameConfig={gameConfig} />\n\t\t</>\n\t);\n};\n\nexport default ThemeProvider;\n","import {\n\tisEmpty,\n\tisLoaded,\n\tuseFirebase,\n\tuseFirebaseConnect,\n} from 'react-redux-firebase';\nimport { useSelector } from 'react-redux';\n\nimport useAuth from 'store/firebase/hooks/useAuth';\nimport { fromFirestore, toFirestore } from 'store/firebase/utils';\nimport { makeSelectOnlineGame } from 'store/redux/reducers/firebase/selectors';\nimport { GameState } from 'store/redux/reducers/game/types';\nimport { generateDefaultGameState } from 'utils/game';\n// TODO: react-router\n// import LoadingIndicator from 'components/LoadingIndicator';\n// import NoAccess from 'components/NoAccess';\n// TODO: notification-provider\n// import useNotificationProvider from 'store/redux/hooks/useNotificationProvider';\n\nconst LoadingIndicator = () => <>LoadingIndicator</>;\nconst NoAccess = () => <>NoAccess</>;\n\nconst defaultGameState = generateDefaultGameState();\n\nconst useWatchOnlineGame = (id: string) => {\n\t// const { notifyError } = useNotificationProvider();\n\tconst { userId } = useAuth();\n\tconst firebase = useFirebase();\n\tuseFirebaseConnect(`online/${id}`);\n\n\tconst onlineGameFromFirebase = useSelector(makeSelectOnlineGame(id));\n\n\tconst pending = !isLoaded(onlineGameFromFirebase) && <LoadingIndicator />;\n\tconst error = isEmpty(onlineGameFromFirebase) && <NoAccess />;\n\n\tconst onlineGame =\n\t\t(onlineGameFromFirebase && fromFirestore(onlineGameFromFirebase)) || [];\n\n\tconst createOnlineGame = async (props: GameState, gameId: string = id) => {\n\t\ttry {\n\t\t\tawait firebase.set(\n\t\t\t\t`online/${gameId}`,\n\t\t\t\ttoFirestore({\n\t\t\t\t\t...props,\n\t\t\t\t\tuserId,\n\t\t\t\t\t// extra props\n\t\t\t\t})\n\t\t\t);\n\t\t} catch (err) {\n\t\t\t// notifyError(err);\n\t\t}\n\t};\n\n\tconst updateOnlineGame = async (props: Partial<GameState>) => {\n\t\ttry {\n\t\t\tawait firebase.update(`online/${id}`, toFirestore(props));\n\t\t} catch (err) {\n\t\t\t// notifyError(err);\n\t\t}\n\t};\n\n\tconst deleteOnlineGame = async () => {\n\t\ttry {\n\t\t\tawait firebase.remove(`online/${id}`);\n\t\t} catch (err) {\n\t\t\t// notifyError(err);\n\t\t}\n\t};\n\n\tconst gameState: GameState = {\n\t\tplayers: onlineGame.players || defaultGameState.players,\n\t\tgameMap: onlineGame.gameMap || defaultGameState.gameMap,\n\t\tbombs: onlineGame.bombs || defaultGameState.bombs,\n\t\tpowerUps: onlineGame.powerUps || defaultGameState.powerUps,\n\t\tis3D: onlineGame.is3D || defaultGameState.is3D,\n\t\tisSideView: onlineGame.isSideView || defaultGameState.isSideView,\n\t\tanimationCounter:\n\t\t\tonlineGame.animationCounter || defaultGameState.animationCounter,\n\t\tconfig: defaultGameState.config,\n\t};\n\n\treturn {\n\t\tgameState,\n\t\tcreateOnlineGame,\n\t\tupdateOnlineGame,\n\t\tdeleteOnlineGame,\n\t\tpending,\n\t\terror,\n\t};\n};\n\nexport default useWatchOnlineGame;\n","import Container from 'components/Container';\nimport Game from 'containers/Game';\nimport { Provider as StoreProvider } from 'react-redux';\nimport configureStore from 'store/redux';\nimport { __IS_DEV__ } from 'app';\nimport useLocalGame from 'store/redux/hooks/useLocalGame';\nimport { getReactReduxFirebaseProps } from 'store/firebase';\nimport { ReactReduxFirebaseProvider } from 'react-redux-firebase';\nimport useOnlineGame from 'store/redux/hooks/useOnlineGame';\nimport ThemeProvider from 'containers/ThemeProvider';\nimport './created-by-numan';\n\nconst initialState = {};\nconst store = configureStore(initialState);\n// @ts-ignore\nif (__IS_DEV__) window.__redux_store = store;\n\nconst LocalGame = () => {\n\tconst gameProps = useLocalGame();\n\treturn <Game {...gameProps} />;\n};\n\nconst OnlineGame = () => {\n\tconst { pending, error, ...gameProps } = useOnlineGame('game1');\n\treturn pending || error || <Game {...gameProps} />;\n};\n\n// const ONLINE = true;\nconst ONLINE = false;\n\nconst App = () => {\n\treturn (\n\t\t<StoreProvider store={store}>\n\t\t\t<ReactReduxFirebaseProvider {...getReactReduxFirebaseProps(store)}>\n\t\t\t\t<ThemeProvider>\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t{(ONLINE && <OnlineGame />) || <LocalGame />}\n\t\t\t\t\t</Container>\n\t\t\t\t\t<div id=\"created-by-numan\" />\n\t\t\t\t</ThemeProvider>\n\t\t\t</ReactReduxFirebaseProvider>\n\t\t</StoreProvider>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n\tif (onPerfEntry && onPerfEntry instanceof Function) {\n\t\timport('web-vitals').then(\n\t\t\t({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n\t\t\t\tgetCLS(onPerfEntry);\n\t\t\t\tgetFID(onPerfEntry);\n\t\t\t\tgetFCP(onPerfEntry);\n\t\t\t\tgetLCP(onPerfEntry);\n\t\t\t\tgetTTFB(onPerfEntry);\n\t\t\t}\n\t\t);\n\t}\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from 'containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}