{{#if wantAsync}}
import { fetchDataRequest, dataFetched, dataFetchingError } from '../actions';
import { FETCH_DATA_REQUEST, FETCH_DATA_SUCCESS, FETCH_DATA_ERROR } from '../constants';
{{else}}
import { set{{properCase defaultStateName}} } from '../actions';
import { SET_{{ constantCase defaultStateName }} } from '../constants';
{{/if}}

describe('{{properCase name}} actions', () => {
{{#if wantAsync}}
	describe('fetchDataRequest', () => {
		it('should return the correct type', () => {
			const expectedResult = {
				type: FETCH_DATA_REQUEST,
			};

			expect(fetchDataRequest()).toEqual(expectedResult);
		});
	});

	describe('dataFetched', () => {
		it('should return the correct type and the passed data', () => {
			const response = [
				{
					data: 'Some data',
				},
			];
			const expectedResult = {
				type: FETCH_DATA_SUCCESS,
				data: response,
			};

			expect(dataFetched(response)).toEqual(expectedResult);
		});
	});

	describe('dataFetchingError', () => {
		it('should return the correct type and the error', () => {
			const response = {
				msg: 'Something went wrong!',
			};
			const expectedResult = {
				type: FETCH_DATA_ERROR,
				error: response,
			};

			expect(dataFetchingError(response)).toEqual(expectedResult);
		});
	});
{{else}}
	describe('set{{ defaultStateName }} Action', () => {
		const payload = 'test';
		it('has a type of SET_{{ constantCase defaultStateName }}', () => {
			const expected = {
				type: SET_{{ constantCase defaultStateName }},
				payload
			};
			expect(set{{properCase defaultStateName}}(payload)).toEqual(expected);
		});
	});
{{/if}}
});
