{{#if wantAsync}}
import produce from 'immer';
import {{camelCase name}}Reducer from '../reducer';
import { fetchData, dataFetched, dataFetchingError } from '../actions';
{{else}}
// import produce from 'immer';
import {{camelCase name}}Reducer from '../reducer';
// import { someAction } from '../actions';
{{/if}}
import { DEFAULT_VALUES } from '../constants';

/* eslint-disable default-case, no-param-reassign */
describe('{{camelCase name}}Reducer', () => {
	let state;
	beforeEach(() => {
	{{#if wantAsync}}
		state = {			
			loading: false,
			error: null,
			data: null,
		};
	{{else}}
		state = DEFAULT_VALUES;
	{{/if}}
	});

	it('returns the initial state', () => {
		const expectedResult = state;
		expect({{camelCase name}}Reducer(undefined, {})).toEqual(expectedResult);
	});

{{#if wantAsync}}
	it('should handle the fetchData action correctly', () => {
		const expectedResult = produce(state, (draft) => {
			draft.loading = true;
			draft.error = null;
			draft.data = null;
		});

		expect(appReducer(state, fetchData())).toEqual(expectedResult);
	});

	it('should handle the dataFetched action correctly', () => {
		const response = [
			{
				data: 'Some data',
			},
		];
		const expectedResult = produce(state, (draft) => {
			draft.data = response;
			draft.loading = false;
		});

		expect(appReducer(state, dataFetched(response))).toEqual(
			expectedResult
		);
	});

	it('should handle the dataFetchingError action correctly', () => {
		const response = {
			msg: 'Not found',
		};
		const expectedResult = produce(state, (draft) => {
			draft.error = response;
			draft.loading = false;
		});

		expect(appReducer(state, dataFetchingError(response))).toEqual(
			expectedResult
		);
	});
{{else}}
	/**
	* Example state change comparison
	*
	* it('should handle the someAction action correctly', () => {
	* 	const expectedResult = produce(state, draft => {
	* 		draft.loading = true;
	* 		draft.error = false;
	* 		draft.userData.nested = false;
	* 	});
	*
	* 	expect(appReducer(state, someAction())).toEqual(expectedResult);
	* });
	*/
{{/if}}
});
