import { KEY, DEFAULT_VALUES } from '../constants';
{{#if wantAsync}}
import {
	select{{properCase defaultStateName}},
	makeSelectLoading,
	makeSelectError,
	makeSelectData,
} from '../selectors';
{{else}}
import { select{{properCase defaultStateName}} } from '../selectors';
{{/if}}

describe('select{{properCase defaultStateName}}', () => {
	const EMPTY = {};

	it('should select the DEFAULT_VALUES without a base state', () => {
		expect(select{{properCase defaultStateName}}(EMPTY)).toEqual(DEFAULT_VALUES);
	});

	it('should select empty for an empty base state', () => {
		const mockedState = {
			[KEY]: EMPTY,
		};
		expect(select{{properCase defaultStateName}}(mockedState)).toEqual(EMPTY);
	});
});

{{#if wantAsync}}
describe('makeSelectLoading', () => {
	const loadingSelector = makeSelectLoading();
	it('should select the loading', () => {
		const loading = false;
		const mockedState = {
			{{properCase defaultStateName}}: {
				loading,
			},
		};
		expect(loadingSelector(mockedState)).toEqual(loading);
	});
});

describe('makeSelectError', () => {
	const errorSelector = makeSelectError();
	it('should select the error', () => {
		const error = 404;
		const mockedState = {
			{{properCase defaultStateName}}: {
				error,
			},
		};
		expect(errorSelector(mockedState)).toEqual(error);
	});
});

describe('makeSelectData', () => {
	const dataSelector = makeSelectData();
	it('should select the data', () => {
		const data = [];
		const mockedState = {
			{{properCase defaultStateName}}: {
				data,
			},
		};
		expect(dataSelector(mockedState)).toEqual(data);
	});
});
{{/if}}
