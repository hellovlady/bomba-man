// below doesn't work..
// $gameSize: var(--game-size, 15);
// global
$gameSize: 15;

@mixin bouncy-block($i) {
	animation: bouncy var(--block-animation-duration) ease
		calc(#{$i} * var(--incremental-animation-delay)) forwards;
}

@mixin transition-color($i, $type) {
	animation: transition-color-#{$type} calc(
			var(--block-animation-duration) + #{$i} * var(--incremental-animation-delay)
		) var(--ease-in-out-back) forwards;
}

@for $i from 1 through $gameSize * $gameSize {
	.bouncy-block-#{$i} {
		@include bouncy-block($i);

		&.T2 {
			& > div {
				// background-color: var(--secondary-background);
				@include transition-color($i, 'T2');
			}
		}

		&.T3 {
			& > div {
				// background-color: var(--secondary-background);
				@include transition-color($i, 'T3');
			}
		}
	}
}

// T2 => breaking, T3 => non-breaking, ...
@for $i from 2 through 3 {
	@keyframes transition-color-T#{$i} {
		0%,
		40% {
			background-color: var(--secondary-background);
		}
		100% {
			@if $i == 2 {
				background-color: var(--primary-color);
			} @else if $i == 3 {
				background-color: var(--secondary-color);
			}
		}
	}
}

@keyframes bouncy {
	0% {
		transform: scale(1, 1) translateZ(calc(var(--tile-size) / 2 * -1px));
	}
	55% {
		transform: scale(0.7, 1.3) translateZ(calc(var(--tile-size) / 2 * -1px));
	}
	65% {
		transform: scale(1.3, 0.7) translateZ(calc(var(--tile-size) / 2 * 0px));
	}
	75% {
		transform: scale(0.95, 1.05)
			translateZ(calc(var(--tile-size) / 2 * 0px));
	}
	100% {
		transform: scale(1, 1) translateZ(calc(var(--tile-size) / 2 * 1px));
	}
}

.cuboid {
	height: calc(var(--tile-size) * 1px);
	width: calc(var(--tile-size) * 1px);
	transform-style: preserve-3d;
	position: absolute;
	transform-origin: center center;
	transition: 300ms;

	transform: scale(1, 1) translateZ(calc(var(--tile-size) / 2 * -1px));

	& > div {
		border: 1px solid var(--primary-background);

		height: calc(var(--tile-size) * 1px);
		width: calc(var(--tile-size) * 1px);
		// transform-origin: 50% 50%;
		top: 50%;
		left: 50%;
		position: absolute;

		/** @see https://codepen.io/jh3y/pen/BaKqQLJ */
		&:nth-of-type(1) {
			transform: translate(-50%, -50%) rotateX(-90deg)
				translateZ(calc((var(--tile-size) / 2) * 1px));
		}
		&:nth-of-type(2) {
			transform: translate(-50%, -50%) rotateX(-90deg) rotateY(180deg)
				translateZ(calc((var(--tile-size) / 2) * 1px));
		}
		&:nth-of-type(3) {
			transform: translate(-50%, -50%) rotateX(-90deg) rotateY(90deg)
				translateZ(calc((var(--tile-size) / 2) * 1px));
		}
		&:nth-of-type(4) {
			transform: translate(-50%, -50%) rotateX(-90deg) rotateY(-90deg)
				translateZ(calc((var(--tile-size) / 2) * 1px));
		}
		&:nth-of-type(5) {
			background-color: var(--secondary-background);
			transform: translate(-50%, -50%)
				translateZ(calc((var(--tile-size) / 2) * 1px));
		}
		&:nth-of-type(6) {
			transform: translate(-50%, -50%)
				translateZ(calc((var(--tile-size) / 2) * -1px)) rotateX(180deg);
		}
	}

	&.bouncy-block- {
		&no-animation {
			transform: translateZ(calc(var(--tile-size) / 2 * 1px));
			& > div {
				background-color: var(--secondary-color);
			}
		}

		&0 {
			transform: translateZ(calc(var(--tile-size) / 2 * 1px))
				rotateX(0deg) rotateY(0deg) rotateZ(0deg);
		}
	}
}
